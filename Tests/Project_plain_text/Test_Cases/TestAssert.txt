FUNCTION_BLOCK TestAssert
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR

// Compare two REAL values with tolerance
FUNCTION AssertEqual_REAL : BOOL
VAR_INPUT
    expected : REAL;
    actual : REAL;
    tolerance : REAL := 0.001; // Default tolerance for floating point comparisons
END_VAR
VAR_OUTPUT
    message : STRING;
END_VAR

message := '';
IF ABS(expected - actual) <= tolerance THEN
    AssertEqual_REAL := TRUE;
    message := '';
ELSE
    AssertEqual_REAL := FALSE;
    message := CONCAT('Expected ', REAL_TO_STRING(expected), ' but got ', REAL_TO_STRING(actual));
END_IF
END_FUNCTION

// Compare two matrices element by element
FUNCTION AssertMatrixEqual : BOOL
VAR_IN_OUT
    expected : ARRAY[*,*] OF REAL;
    actual : ARRAY[*,*] OF REAL;
END_VAR
VAR_INPUT
    tolerance : REAL := 0.001;
END_VAR
VAR_OUTPUT
    message : STRING;
    failRow : DINT;
    failCol : DINT;
END_VAR
VAR
    i, j : DINT;
    rows, cols : DINT;
END_VAR

message := '';
failRow := 0;
failCol := 0;

// Check dimensions first
IF UPPER_BOUND(expected, 1) <> UPPER_BOUND(actual, 1) OR UPPER_BOUND(expected, 2) <> UPPER_BOUND(actual, 2) THEN
    AssertMatrixEqual := FALSE;
    message := 'Matrix dimensions do not match';
    RETURN;
END_IF

rows := UPPER_BOUND(expected, 1);
cols := UPPER_BOUND(expected, 2);

// Compare elements
FOR i := 1 TO rows DO
    FOR j := 1 TO cols DO
        IF ABS(expected[i,j] - actual[i,j]) > tolerance THEN
            AssertMatrixEqual := FALSE;
            failRow := i;
            failCol := j;
            message := CONCAT('Mismatch at [', DINT_TO_STRING(i), ',', DINT_TO_STRING(j), 
                              ']: Expected ', REAL_TO_STRING(expected[i,j]), 
                              ' but got ', REAL_TO_STRING(actual[i,j]));
            RETURN;
        END_IF
    END_FOR
END_FOR

AssertMatrixEqual := TRUE;
END_FUNCTION

// Assert that a condition is true
FUNCTION AssertTrue : BOOL
VAR_INPUT
    condition : BOOL;
    message_if_false : STRING := 'Assertion failed';
END_VAR
VAR_OUTPUT
    message : STRING;
END_VAR

IF condition THEN
    AssertTrue := TRUE;
    message := '';
ELSE
    AssertTrue := FALSE;
    message := message_if_false;
END_IF
END_FUNCTION

// Assert that two strings are equal
FUNCTION AssertStringEqual : BOOL
VAR_INPUT
    expected : STRING;
    actual : STRING;
END_VAR
VAR_OUTPUT
    message : STRING;
END_VAR

IF expected = actual THEN
    AssertStringEqual := TRUE;
    message := '';
ELSE
    AssertStringEqual := FALSE;
    message := CONCAT('Expected \'', expected, '\' but got \'', actual, '\'');
END_IF
END_FUNCTION 