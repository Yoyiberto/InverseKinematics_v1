FUNCTION_BLOCK TransSE3_fromExp_se3TestSuite
VAR_INPUT
    bExecute : BOOL; // Trigger to run tests
END_VAR
VAR_OUTPUT
    bDone : BOOL;    // All tests complete
    nPassCount : INT; // Number of passed tests
    nFailCount : INT; // Number of failed tests
    sLastError : STRING; // Last error message
END_VAR
VAR
    nCurrentTest : INT := 0;
    FB_UnderTest : TransSE3_fromExp_se3; // Instance of the function block

    // Test data
    se3mat_in_zero : ARRAY[1..4, 1..4] OF REAL;
    T_expected_identity : ARRAY[1..4, 1..4] OF REAL;

    se3mat_in_pure_rotation : ARRAY[1..4, 1..4] OF REAL; // Rotation PI/2 around Z
    T_expected_pure_rotation : ARRAY[1..4, 1..4] OF REAL;

    se3mat_in_pure_translation : ARRAY[1..4, 1..4] OF REAL; // Translation [1, 2, 3]
    T_expected_pure_translation : ARRAY[1..4, 1..4] OF REAL;

    se3mat_in_screw : ARRAY[1..4, 1..4] OF REAL; // Screw motion: Rot PI around Z, Trans [0, 0, 2]
    T_expected_screw : ARRAY[1..4, 1..4] OF REAL;

    T_out : ARRAY[1..4, 1..4] OF REAL;

    i, j : DINT;
    bTestPass : BOOL;
    fEpsilon : REAL := 1E-5; // Tolerance for REAL comparisons (might need adjustment)
    PI : REAL := 3.1415926535;
END_VAR

// Main execution code
IF bExecute AND NOT bDone THEN
    CASE nCurrentTest OF
        0: // Setup test data
            // Zero Twist -> Identity Transform
            FOR i := 1 TO 4 DO 
                FOR j := 1 TO 4 DO 
                    se3mat_in_zero[i, j] := 0.0; 
                END_FOR 
            END_FOR
            FOR i := 1 TO 4 DO 
                FOR j := 1 TO 4 DO 
                    IF i=j THEN 
                        T_expected_identity[i, j] := 1.0; 
                    ELSE 
                        T_expected_identity[i, j] := 0.0;  
                    END_IF 
                END_FOR 
            END_FOR

            // Pure Rotation (PI/2 around Z): se3mat = [0, -pi/2, 0, 0; pi/2, 0, 0, 0; 0, 0, 0, 0; 0, 0, 0, 0]
            FOR i := 1 TO 4 DO 
                FOR j := 1 TO 4 DO 
                    se3mat_in_pure_rotation[i, j] := 0.0; 
                END_FOR 
            END_FOR
            se3mat_in_pure_rotation[1, 2] := -PI / 2.0;
            se3mat_in_pure_rotation[2, 1] := PI / 2.0;
            // Expected T: Rot(Z, PI/2), Pos(0,0,0)
            FOR i := 1 TO 4 DO 
                FOR j := 1 TO 4 DO 
                    T_expected_pure_rotation[i, j] := 0.0; 
                END_FOR 
            END_FOR
            T_expected_pure_rotation[1, 1] := 0.0; T_expected_pure_rotation[1, 2] := -1.0;
            T_expected_pure_rotation[2, 1] := 1.0; T_expected_pure_rotation[2, 2] := 0.0;
            T_expected_pure_rotation[3, 3] := 1.0;
            T_expected_pure_rotation[4, 4] := 1.0;

            // Pure Translation [1, 2, 3]: se3mat = [0, 0, 0, 1; 0, 0, 0, 2; 0, 0, 0, 3; 0, 0, 0, 0]
            FOR i := 1 TO 4 DO 
                FOR j := 1 TO 4 DO 
                    se3mat_in_pure_translation[i, j] := 0.0; 
                END_FOR 
            END_FOR
            se3mat_in_pure_translation[1, 4] := 1.0;
            se3mat_in_pure_translation[2, 4] := 2.0;
            se3mat_in_pure_translation[3, 4] := 3.0;
            // Expected T: Rot=Identity, Pos=[1, 2, 3]
            FOR i := 1 TO 4 DO 
                FOR j := 1 TO 4 DO 
                    IF i=j THEN 
                        T_expected_pure_translation[i, j] := 1.0; 
                    ELSE 
                        T_expected_pure_translation[i, j] := 0.0;  
                    END_IF 
                END_FOR 
            END_FOR
            T_expected_pure_translation[1, 4] := 1.0;
            T_expected_pure_translation[2, 4] := 2.0;
            T_expected_pure_translation[3, 4] := 3.0;

             // Screw Motion (Rot PI around Z, Trans [0, 0, 2]): se3mat = [0, -pi, 0, 0; pi, 0, 0, 0; 0, 0, 0, 2; 0, 0, 0, 0]
            FOR i := 1 TO 4 DO 
                FOR j := 1 TO 4 DO 
                    se3mat_in_screw[i, j] := 0.0; 
                END_FOR 
            END_FOR
            se3mat_in_screw[1, 2] := -PI;
            se3mat_in_screw[2, 1] := PI;
            se3mat_in_screw[3, 4] := 2.0; // v*theta
            // Expected T: Rot(Z, PI), Pos = Ginv*v = [0, 0, 2]
            FOR i := 1 TO 4 DO 
                FOR j := 1 TO 4 DO 
                    T_expected_screw[i, j] := 0.0; 
                END_FOR 
            END_FOR
            T_expected_screw[1, 1] := -1.0; T_expected_screw[1, 2] := 0.0;
            T_expected_screw[2, 1] := 0.0; T_expected_screw[2, 2] := -1.0;
            T_expected_screw[3, 3] := 1.0;
            T_expected_screw[1, 4] := 0.0; // Note: Actual calculation is more complex, using formula
            T_expected_screw[2, 4] := 0.0; // For this specific case, it simplifies
            T_expected_screw[3, 4] := 2.0;
            T_expected_screw[4, 4] := 1.0;

            nCurrentTest := nCurrentTest + 1;

        1: // Test with Zero Twist
            FB_UnderTest(se3mat := se3mat_in_zero, T => T_out);
            bTestPass := CheckMatrixEquality_4x4(mat1 := ADR(T_out), mat2 := ADR(T_expected_identity), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'TransSE3_fromExp_se3 failed for Zero Twist';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        2: // Test with Pure Rotation
            FB_UnderTest(se3mat := se3mat_in_pure_rotation, T => T_out);
            bTestPass := CheckMatrixEquality_4x4(mat1 := ADR(T_out), mat2 := ADR(T_expected_pure_rotation), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'TransSE3_fromExp_se3 failed for Pure Rotation';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        3: // Test with Pure Translation
            FB_UnderTest(se3mat := se3mat_in_pure_translation, T => T_out);
            bTestPass := CheckMatrixEquality_4x4(mat1 := ADR(T_out), mat2 := ADR(T_expected_pure_translation), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'TransSE3_fromExp_se3 failed for Pure Translation';
            END_IF
            nCurrentTest := nCurrentTest + 1;

         4: // Test with Screw Motion
            FB_UnderTest(se3mat := se3mat_in_screw, T => T_out);
            // Relax tolerance slightly for screw motion calculations involving trig
            bTestPass := CheckMatrixEquality_4x4(mat1 := ADR(T_out), mat2 := ADR(T_expected_screw), tolerance := fEpsilon * 10);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'TransSE3_fromExp_se3 failed for Screw Motion';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        ELSE
            bDone := TRUE;
    END_CASE
END_IF

IF NOT bExecute THEN
    nCurrentTest := 0;
    nPassCount := 0;
    nFailCount := 0;
    sLastError := '';
    bDone := FALSE;
END_IF
ENDFUNCTION_BLOCK 