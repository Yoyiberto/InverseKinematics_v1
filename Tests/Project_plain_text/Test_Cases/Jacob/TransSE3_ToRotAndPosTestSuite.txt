\
FUNCTION_BLOCK TransSE3_ToRotAndPosTestSuite
VAR_INPUT
    bExecute : BOOL; // Trigger to run tests
END_VAR
VAR_OUTPUT
    bDone : BOOL;    // All tests complete
    nPassCount : INT; // Number of passed tests
    nFailCount : INT; // Number of failed tests
    sLastError : STRING; // Last error message
END_VAR
VAR
    nCurrentTest : INT := 0;
    FB_UnderTest : TransSE3_ToRotAndPos; // Instance of the function block

    // Test data
    T_in_identity : ARRAY[1..4, 1..4] OF REAL;
    RotMat_out : ARRAY[1..3, 1..3] OF REAL;
    p_out : ARRAY[1..3] OF REAL;

    T_in_general : ARRAY[1..4, 1..4] OF REAL;
    RotMat_expected_general : ARRAY[1..3, 1..3] OF REAL;
    p_expected_general : ARRAY[1..3] OF REAL;


    i, j : DINT;
    bTestPass : BOOL;
    fEpsilon : REAL := 1E-6; // Tolerance for REAL comparisons
END_VAR

// Main execution code
IF bExecute AND NOT bDone THEN
    CASE nCurrentTest OF
        0: // Setup test data
            // Identity Transform
            FOR i := 1 TO 4 DO
                FOR j := 1 TO 4 DO
                    IF i = j THEN
                        T_in_identity[i, j] := 1.0;
                    ELSE
                        T_in_identity[i, j] := 0.0;
                    END_IF
                END_FOR
            END_FOR
             T_in_identity[4,4] := 1.0; // Ensure bottom right is 1

            // General Transform (Example: Rotation around Z by 90 deg, translation [1, 2, 3])
            // Rotation Part
            T_in_general[1,1] := 0.0; T_in_general[1,2] := -1.0; T_in_general[1,3] := 0.0;
            T_in_general[2,1] := 1.0; T_in_general[2,2] := 0.0; T_in_general[2,3] := 0.0;
            T_in_general[3,1] := 0.0; T_in_general[3,2] := 0.0; T_in_general[3,3] := 1.0;
            // Translation Part
            T_in_general[1,4] := 1.0;
            T_in_general[2,4] := 2.0;
            T_in_general[3,4] := 3.0;
            // Bottom Row
            T_in_general[4,1] := 0.0; T_in_general[4,2] := 0.0; T_in_general[4,3] := 0.0; T_in_general[4,4] := 1.0;

            // Expected results for general transform
            RotMat_expected_general[1,1] := 0.0; RotMat_expected_general[1,2] := -1.0; RotMat_expected_general[1,3] := 0.0;
            RotMat_expected_general[2,1] := 1.0; RotMat_expected_general[2,2] := 0.0; RotMat_expected_general[2,3] := 0.0;
            RotMat_expected_general[3,1] := 0.0; RotMat_expected_general[3,2] := 0.0; RotMat_expected_general[3,3] := 1.0;
            p_expected_general[1] := 1.0; p_expected_general[2] := 2.0; p_expected_general[3] := 3.0;


            nCurrentTest := nCurrentTest + 1;

        1: // Test with Identity Transform
            FB_UnderTest(T := T_in_identity);

            bTestPass := TRUE;
            // Check Rotation Matrix (should be identity)
            FOR i := 1 TO 3 DO
                FOR j := 1 TO 3 DO
                    IF i = j THEN
                        IF ABS(FB_UnderTest.RotMat[i,j] - 1.0) >= fEpsilon THEN
                            bTestPass := FALSE; EXIT;
                        END_IF
                    ELSE
                        IF ABS(FB_UnderTest.RotMat[i,j] - 0.0) >= fEpsilon THEN
                            bTestPass := FALSE; EXIT;
                        END_IF
                    END_IF
                END_FOR
                 IF NOT bTestPass THEN EXIT; END_IF
            END_FOR
            // Check Position Vector (should be zero)
            IF bTestPass THEN
                 FOR i := 1 TO 3 DO
                    IF ABS(FB_UnderTest.p[i] - 0.0) >= fEpsilon THEN
                         bTestPass := FALSE; EXIT;
                    END_IF
                 END_FOR
            END_IF;

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'TransSE3_ToRotAndPos failed for Identity Transform';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        2: // Test with General Transform
             FB_UnderTest(T := T_in_general);

            bTestPass := TRUE;
            // Check Rotation Matrix
            FOR i := 1 TO 3 DO
                FOR j := 1 TO 3 DO
                     IF ABS(FB_UnderTest.RotMat[i,j] - RotMat_expected_general[i,j]) >= fEpsilon THEN
                        bTestPass := FALSE; EXIT;
                     END_IF
                END_FOR
                 IF NOT bTestPass THEN EXIT; END_IF
            END_FOR
             // Check Position Vector
            IF bTestPass THEN
                 FOR i := 1 TO 3 DO
                    IF ABS(FB_UnderTest.p[i] - p_expected_general[i]) >= fEpsilon THEN
                         bTestPass := FALSE; EXIT;
                    END_IF
                 END_FOR
            END_IF;

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'TransSE3_ToRotAndPos failed for General Transform';
            END_IF
            nCurrentTest := nCurrentTest + 1;


        ELSE
            bDone := TRUE;
    END_CASE
END_IF

IF NOT bExecute THEN
    nCurrentTest := 0;
    nPassCount := 0;
    nFailCount := 0;
    sLastError := '';
    bDone := FALSE;
END_IF
ENDFUNCTION_BLOCK 