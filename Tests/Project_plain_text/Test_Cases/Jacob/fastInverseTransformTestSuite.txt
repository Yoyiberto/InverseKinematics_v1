FUNCTION_BLOCK fastInverseTransformTestSuite
VAR_INPUT
    bExecute : BOOL; // Trigger to run tests
END_VAR
VAR_OUTPUT
    bDone : BOOL;    // All tests complete
    nPassCount : INT; // Number of passed tests
    nFailCount : INT; // Number of failed tests
    sLastError : STRING; // Last error message
END_VAR
VAR
    nCurrentTest : INT := 0;
    FB_UnderTest : fastInverseTransform; // Instance of the function block
    MatMul_Check : MatMul; // For checking T * invT = Identity

    // Test data
    T_in_identity : ARRAY[1..4, 1..4] OF REAL;
    invT_expected_identity : ARRAY[1..4, 1..4] OF REAL;

    T_in_pure_translation : ARRAY[1..4, 1..4] OF REAL; // Translate [1, 2, 3]
    invT_expected_pure_translation : ARRAY[1..4, 1..4] OF REAL;

    T_in_pure_rotation : ARRAY[1..4, 1..4] OF REAL; // Rotate PI/2 around Z
    invT_expected_pure_rotation : ARRAY[1..4, 1..4] OF REAL;

    T_in_general : ARRAY[1..4, 1..4] OF REAL; // Rotate PI/2 around X, Translate [0, 1, 2]
    invT_expected_general : ARRAY[1..4, 1..4] OF REAL;

    invT_out : ARRAY[1..4, 1..4] OF REAL;
    check_identity_out : ARRAY[1..4, 1..4] OF REAL;

    i, j : DINT;
    bTestPass : BOOL;
    fEpsilon : REAL := 1E-5; // Tolerance for REAL comparisons
    PI : REAL := 3.1415926535;
END_VAR

// Main execution code
IF bExecute AND NOT bDone THEN
    CASE nCurrentTest OF
        0: // Setup test data
            // Identity
            FOR i := 1 TO 4 DO 
                FOR j := 1 TO 4 DO 
                    IF i=j THEN 
                        T_in_identity[i, j] := 1.0; 
                    ELSE 
                        T_in_identity[i, j] := 0.0;  
                    END_IF 
                END_FOR 
            END_FOR
            invT_expected_identity := T_in_identity;

            // Pure Translation [1, 2, 3]
            T_in_pure_translation := T_in_identity;
            T_in_pure_translation[1, 4] := 1.0; T_in_pure_translation[2, 4] := 2.0; T_in_pure_translation[3, 4] := 3.0;
            invT_expected_pure_translation := T_in_identity;
            invT_expected_pure_translation[1, 4] := -1.0; invT_expected_pure_translation[2, 4] := -2.0; invT_expected_pure_translation[3, 4] := -3.0;

            // Pure Rotation Rot(Z, PI/2) = [0 -1 0; 1 0 0; 0 0 1]
            T_in_pure_rotation := T_in_identity;
            T_in_pure_rotation[1, 1] := 0.0; T_in_pure_rotation[1, 2] := -1.0;
            T_in_pure_rotation[2, 1] := 1.0; T_in_pure_rotation[2, 2] := 0.0;
            // Inverse = Rot(Z, -PI/2) = [0 1 0; -1 0 0; 0 0 1]
            invT_expected_pure_rotation := T_in_identity;
            invT_expected_pure_rotation[1, 1] := 0.0; invT_expected_pure_rotation[1, 2] := 1.0;
            invT_expected_pure_rotation[2, 1] := -1.0; invT_expected_pure_rotation[2, 2] := 0.0;

            // General Transform: Rot(X, PI/2) = [1 0 0; 0 0 -1; 0 1 0], Trans = [0, 1, 2]
            T_in_general := T_in_identity;
            T_in_general[2, 2] := 0.0; T_in_general[2, 3] := -1.0;
            T_in_general[3, 2] := 1.0; T_in_general[3, 3] := 0.0;
            T_in_general[1, 4] := 0.0; T_in_general[2, 4] := 1.0; T_in_general[3, 4] := 2.0;
            // Inverse: Rot = Rot(X, -PI/2) = [1 0 0; 0 0 1; 0 -1 0], Trans = -R^T * p = -[1 0 0; 0 0 1; 0 -1 0] * [0;1;2] = -[0; 2; -1] = [0, -2, 1]
            invT_expected_general := T_in_identity;
            invT_expected_general[2, 2] := 0.0; invT_expected_general[2, 3] := 1.0;
            invT_expected_general[3, 2] := -1.0; invT_expected_general[3, 3] := 0.0;
            invT_expected_general[1, 4] := 0.0; invT_expected_general[2, 4] := -2.0; invT_expected_general[3, 4] := 1.0;

            nCurrentTest := nCurrentTest + 1;

        1: // Test with Identity Matrix
            FB_UnderTest(T := T_in_identity, invT => invT_out);
            bTestPass := CheckMatrixEquality_4x4(mat1 := ADR(invT_out), mat2 := ADR(invT_expected_identity), tolerance := fEpsilon);
            // Optional: Check T * invT = I
            MatMul_Check(mat1 := T_in_identity, mat2 := invT_out, MatResult := check_identity_out);
            bTestPass := bTestPass AND CheckMatrixEquality_4x4(mat1:=ADR(check_identity_out), mat2:=ADR(T_in_identity), tolerance:=fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'fastInverseTransform failed for Identity Matrix';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        2: // Test with Pure Translation
            FB_UnderTest(T := T_in_pure_translation, invT => invT_out);
            bTestPass := CheckMatrixEquality_4x4(mat1 := ADR(invT_out), mat2 := ADR(invT_expected_pure_translation), tolerance := fEpsilon);
            MatMul_Check(mat1 := T_in_pure_translation, mat2 := invT_out, MatResult := check_identity_out);
            bTestPass := bTestPass AND CheckMatrixEquality_4x4(mat1:=ADR(check_identity_out), mat2:=ADR(T_in_identity), tolerance:=fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'fastInverseTransform failed for Pure Translation';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        3: // Test with Pure Rotation
            FB_UnderTest(T := T_in_pure_rotation, invT => invT_out);
            bTestPass := CheckMatrixEquality_4x4(mat1 := ADR(invT_out), mat2 := ADR(invT_expected_pure_rotation), tolerance := fEpsilon);
            MatMul_Check(mat1 := T_in_pure_rotation, mat2 := invT_out, MatResult := check_identity_out);
            bTestPass := bTestPass AND CheckMatrixEquality_4x4(mat1:=ADR(check_identity_out), mat2:=ADR(T_in_identity), tolerance:=fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'fastInverseTransform failed for Pure Rotation';
            END_IF
            nCurrentTest := nCurrentTest + 1;

         4: // Test with General Transform
            FB_UnderTest(T := T_in_general, invT => invT_out);
            bTestPass := CheckMatrixEquality_4x4(mat1 := ADR(invT_out), mat2 := ADR(invT_expected_general), tolerance := fEpsilon);
            MatMul_Check(mat1 := T_in_general, mat2 := invT_out, MatResult := check_identity_out);
            bTestPass := bTestPass AND CheckMatrixEquality_4x4(mat1:=ADR(check_identity_out), mat2:=ADR(T_in_identity), tolerance:=fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'fastInverseTransform failed for General Transform';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        ELSE
            bDone := TRUE;
    END_CASE
END_IF

IF NOT bExecute THEN
    nCurrentTest := 0;
    nPassCount := 0;
    nFailCount := 0;
    sLastError := '';
    bDone := FALSE;
END_IF 