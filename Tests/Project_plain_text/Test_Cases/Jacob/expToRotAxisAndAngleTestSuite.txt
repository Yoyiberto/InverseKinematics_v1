FUNCTION_BLOCK expToRotAxisAndAngleTestSuite
VAR_INPUT
    bExecute : BOOL; // Trigger to run tests
END_VAR
VAR_OUTPUT
    bDone : BOOL;    // All tests complete
    nPassCount : INT; // Number of passed tests
    nFailCount : INT; // Number of failed tests
    sLastError : STRING; // Last error message
END_VAR
VAR
    nCurrentTest : INT := 0;
    FB_UnderTest : expToRotAxisAndAngle; // Instance of the function block

    // Test data
    expc3_in_zero : ARRAY[1..3] OF REAL;
    omghat_expected_zero : ARRAY[1..3] OF REAL; // Undefined, but FB might output zero
    theta_expected_zero : REAL;

    expc3_in_rotX_pi : ARRAY[1..3] OF REAL; // Rotation PI around X
    omghat_expected_rotX : ARRAY[1..3] OF REAL;
    theta_expected_rotX_pi : REAL;

    expc3_in_rotZ_neg_pi_2 : ARRAY[1..3] OF REAL; // Rotation -PI/2 around Z
    omghat_expected_rotZ : ARRAY[1..3] OF REAL;
    theta_expected_rotZ_pi_2 : REAL;

    expc3_in_general : ARRAY[1..3] OF REAL; // Vector [1, 2, 3]
    omghat_expected_general : ARRAY[1..3] OF REAL;
    theta_expected_general : REAL;

    omghat_out : ARRAY[1..3] OF REAL;
    theta_out : REAL;

    i : DINT;
    bTestPass : BOOL;
    fEpsilon : REAL := 1E-6; // Tolerance for REAL comparisons
    PI : REAL := 3.1415926535;
END_VAR

// Helper function
FUNCTION CheckVectorEquality_3 : BOOL
VAR_INPUT
    vec1 : POINTER TO ARRAY[1..3] OF REAL;
    vec2 : POINTER TO ARRAY[1..3] OF REAL;
    tolerance : REAL;
END_VAR
VAR
    k : DINT;
END_VAR
    CheckVectorEquality_3 := TRUE;
    FOR k := 1 TO 3 DO
        IF ABS(vec1^[k] - vec2^[k]) >= tolerance THEN
            CheckVectorEquality_3 := FALSE;
            RETURN;
        END_IF
    END_FOR
END_FUNCTION

// Main execution code
IF bExecute AND NOT bDone THEN
    CASE nCurrentTest OF
        0: // Setup test data
            // Zero vector
            expc3_in_zero[1] := 0.0; expc3_in_zero[2] := 0.0; expc3_in_zero[3] := 0.0;
            omghat_expected_zero[1] := 0.0; omghat_expected_zero[2] := 0.0; omghat_expected_zero[3] := 0.0; // Expected behavior for zero input?
            theta_expected_zero := 0.0;

            // Rotation PI around X
            expc3_in_rotX_pi[1] := PI; expc3_in_rotX_pi[2] := 0.0; expc3_in_rotX_pi[3] := 0.0;
            omghat_expected_rotX[1] := 1.0; omghat_expected_rotX[2] := 0.0; omghat_expected_rotX[3] := 0.0;
            theta_expected_rotX_pi := PI;

            // Rotation -PI/2 around Z -> expc3 = [0, 0, -PI/2]
            expc3_in_rotZ_neg_pi_2[1] := 0.0; expc3_in_rotZ_neg_pi_2[2] := 0.0; expc3_in_rotZ_neg_pi_2[3] := -PI / 2.0;
            omghat_expected_rotZ[1] := 0.0; omghat_expected_rotZ[2] := 0.0; omghat_expected_rotZ[3] := -1.0;
            theta_expected_rotZ_pi_2 := PI / 2.0;

            // General Vector [1, 2, 3]
            expc3_in_general[1] := 1.0; expc3_in_general[2] := 2.0; expc3_in_general[3] := 3.0;
            theta_expected_general := SQRT(1.0*1.0 + 2.0*2.0 + 3.0*3.0); // SQRT(14)
            omghat_expected_general[1] := 1.0 / theta_expected_general;
            omghat_expected_general[2] := 2.0 / theta_expected_general;
            omghat_expected_general[3] := 3.0 / theta_expected_general;

            nCurrentTest := nCurrentTest + 1;

        1: // Test with Zero Vector
            // Note: Division by zero if theta is 0. How does the FB handle this?
            // Assuming it outputs 0 for omghat and theta.
            FB_UnderTest(expc3 := expc3_in_zero, omghat => omghat_out, theta => theta_out);
            bTestPass := (ABS(theta_out - theta_expected_zero) < fEpsilon) AND
                       CheckVectorEquality_3(vec1 := ADR(omghat_out), vec2 := ADR(omghat_expected_zero), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'expToRotAxisAndAngle failed for Zero Vector';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        2: // Test with X-Rotation PI
            FB_UnderTest(expc3 := expc3_in_rotX_pi, omghat => omghat_out, theta => theta_out);
            bTestPass := (ABS(theta_out - theta_expected_rotX_pi) < fEpsilon) AND
                       CheckVectorEquality_3(vec1 := ADR(omghat_out), vec2 := ADR(omghat_expected_rotX), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'expToRotAxisAndAngle failed for X-Rotation PI';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        3: // Test with Z-Rotation -PI/2
            FB_UnderTest(expc3 := expc3_in_rotZ_neg_pi_2, omghat => omghat_out, theta => theta_out);
            bTestPass := (ABS(theta_out - theta_expected_rotZ_pi_2) < fEpsilon) AND
                       CheckVectorEquality_3(vec1 := ADR(omghat_out), vec2 := ADR(omghat_expected_rotZ), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'expToRotAxisAndAngle failed for Z-Rotation -PI/2';
            END_IF
            nCurrentTest := nCurrentTest + 1;

         4: // Test with General Vector
            FB_UnderTest(expc3 := expc3_in_general, omghat => omghat_out, theta => theta_out);
            bTestPass := (ABS(theta_out - theta_expected_general) < fEpsilon) AND
                       CheckVectorEquality_3(vec1 := ADR(omghat_out), vec2 := ADR(omghat_expected_general), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'expToRotAxisAndAngle failed for General Vector';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        ELSE
            bDone := TRUE;
    END_CASE
END_IF

IF NOT bExecute THEN
    nCurrentTest := 0;
    nPassCount := 0;
    nFailCount := 0;
    sLastError := '';
    bDone := FALSE;
END_IF
ENDFUNCTION_BLOCK 