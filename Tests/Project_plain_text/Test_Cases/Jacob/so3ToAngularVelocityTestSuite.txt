FUNCTION_BLOCK so3ToAngularVelocityTestSuite
VAR_INPUT
    bExecute : BOOL; // Trigger to run tests
END_VAR
VAR_OUTPUT
    bDone : BOOL;    // All tests complete
    nPassCount : INT; // Number of passed tests
    nFailCount : INT; // Number of failed tests
    sLastError : STRING; // Last error message
END_VAR
VAR
    nCurrentTest : INT := 0;
    FB_UnderTest : so3ToAngularVelocity; // Instance of the function block

    // Test data
    so3mat_in_zero : ARRAY[1..3, 1..3] OF REAL;
    omg_expected_zero : ARRAY[1..3] OF REAL;

    so3mat_in_rotX : ARRAY[1..3, 1..3] OF REAL; // Skew-symmetric for [1, 0, 0]
    omg_expected_rotX : ARRAY[1..3] OF REAL;

    so3mat_in_rotY : ARRAY[1..3, 1..3] OF REAL; // Skew-symmetric for [0, 2, 0]
    omg_expected_rotY : ARRAY[1..3] OF REAL;

    so3mat_in_rotZ : ARRAY[1..3, 1..3] OF REAL; // Skew-symmetric for [0, 0, -3]
    omg_expected_rotZ : ARRAY[1..3] OF REAL;

    so3mat_in_general : ARRAY[1..3, 1..3] OF REAL; // Skew-symmetric for [1, 2, 3]
    omg_expected_general : ARRAY[1..3] OF REAL;

    omg_out : ARRAY[1..3] OF REAL;

    i, j : DINT;
    bTestPass : BOOL;
    fEpsilon : REAL := 1E-6; // Tolerance for REAL comparisons
END_VAR

// Helper function
FUNCTION CheckVectorEquality_3 : BOOL
VAR_INPUT
    vec1 : POINTER TO ARRAY[1..3] OF REAL;
    vec2 : POINTER TO ARRAY[1..3] OF REAL;
    tolerance : REAL;
END_VAR
VAR
    k : DINT;
END_VAR
    CheckVectorEquality_3 := TRUE;
    FOR k := 1 TO 3 DO
        IF ABS(vec1^[k] - vec2^[k]) >= tolerance THEN
            CheckVectorEquality_3 := FALSE;
            RETURN;
        END_IF
    END_FOR
END_FUNCTION

// Main execution code
IF bExecute AND NOT bDone THEN
    CASE nCurrentTest OF
        0: // Setup test data
            // Zero matrix
            FOR i := 1 TO 3 DO 
                FOR j := 1 TO 3 DO 
                    so3mat_in_zero[i, j] := 0.0; 
                END_FOR 
            END_FOR
            omg_expected_zero[1] := 0.0; omg_expected_zero[2] := 0.0; omg_expected_zero[3] := 0.0;

            // Rotation around X (w = [1, 0, 0]) -> so3 = [0 0 0; 0 0 -1; 0 1 0]
            FOR i := 1 TO 3 DO 
                FOR j := 1 TO 3 DO 
                    so3mat_in_rotX[i, j] := 0.0; 
                END_FOR 
            END_FOR
            so3mat_in_rotX[2, 3] := -1.0;
            so3mat_in_rotX[3, 2] := 1.0;
            omg_expected_rotX[1] := 1.0; omg_expected_rotX[2] := 0.0; omg_expected_rotX[3] := 0.0;

            // Rotation around Y (w = [0, 2, 0]) -> so3 = [0 0 2; 0 0 0; -2 0 0]
            FOR i := 1 TO 3 DO 
                FOR j := 1 TO 3 DO 
                    so3mat_in_rotY[i, j] := 0.0; 
                END_FOR 
            END_FOR
            so3mat_in_rotY[1, 3] := 2.0;
            so3mat_in_rotY[3, 1] := -2.0;
            omg_expected_rotY[1] := 0.0; omg_expected_rotY[2] := 2.0; omg_expected_rotY[3] := 0.0;

            // Rotation around Z (w = [0, 0, -3]) -> so3 = [0 3 0; -3 0 0; 0 0 0]
            FOR i := 1 TO 3 DO 
                FOR j := 1 TO 3 DO 
                    so3mat_in_rotZ[i, j] := 0.0; 
                END_FOR 
            END_FOR
            so3mat_in_rotZ[1, 2] := 3.0;
            so3mat_in_rotZ[2, 1] := -3.0;
            omg_expected_rotZ[1] := 0.0; omg_expected_rotZ[2] := 0.0; omg_expected_rotZ[3] := -3.0;

            // General rotation (w = [1, 2, 3]) -> so3 = [0 -3 2; 3 0 -1; -2 1 0]
            so3mat_in_general[1, 1] := 0.0; so3mat_in_general[1, 2] := -3.0; so3mat_in_general[1, 3] := 2.0;
            so3mat_in_general[2, 1] := 3.0; so3mat_in_general[2, 2] := 0.0; so3mat_in_general[2, 3] := -1.0;
            so3mat_in_general[3, 1] := -2.0; so3mat_in_general[3, 2] := 1.0; so3mat_in_general[3, 3] := 0.0;
            omg_expected_general[1] := 1.0; omg_expected_general[2] := 2.0; omg_expected_general[3] := 3.0;

            nCurrentTest := nCurrentTest + 1;

        1: // Test with Zero Matrix
            FB_UnderTest(so3mat := so3mat_in_zero, omg => omg_out);
            bTestPass := CheckVectorEquality_3(vec1 := ADR(omg_out), vec2 := ADR(omg_expected_zero), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'so3ToAngularVelocity failed for Zero Matrix';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        2: // Test with X-Rotation Matrix
            FB_UnderTest(so3mat := so3mat_in_rotX, omg => omg_out);
            bTestPass := CheckVectorEquality_3(vec1 := ADR(omg_out), vec2 := ADR(omg_expected_rotX), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'so3ToAngularVelocity failed for X-Rotation';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        3: // Test with Y-Rotation Matrix
            FB_UnderTest(so3mat := so3mat_in_rotY, omg => omg_out);
            bTestPass := CheckVectorEquality_3(vec1 := ADR(omg_out), vec2 := ADR(omg_expected_rotY), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'so3ToAngularVelocity failed for Y-Rotation';
            END_IF
            nCurrentTest := nCurrentTest + 1;

         4: // Test with Z-Rotation Matrix
            FB_UnderTest(so3mat := so3mat_in_rotZ, omg => omg_out);
            bTestPass := CheckVectorEquality_3(vec1 := ADR(omg_out), vec2 := ADR(omg_expected_rotZ), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'so3ToAngularVelocity failed for Z-Rotation';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        5: // Test with General Rotation Matrix
            FB_UnderTest(so3mat := so3mat_in_general, omg => omg_out);
            bTestPass := CheckVectorEquality_3(vec1 := ADR(omg_out), vec2 := ADR(omg_expected_general), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'so3ToAngularVelocity failed for General Rotation';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        ELSE
            bDone := TRUE;
    END_CASE
END_IF

IF NOT bExecute THEN
    nCurrentTest := 0;
    nPassCount := 0;
    nFailCount := 0;
    sLastError := '';
    bDone := FALSE;
END_IF
ENDFUNCTION_BLOCK 