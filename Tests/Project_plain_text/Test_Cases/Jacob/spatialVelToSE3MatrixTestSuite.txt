FUNCTION_BLOCK spatialVelToSE3MatrixTestSuite
VAR_INPUT
    bExecute : BOOL; // Trigger to run tests
END_VAR
VAR_OUTPUT
    bDone : BOOL;    // All tests complete
    nPassCount : INT; // Number of passed tests
    nFailCount : INT; // Number of failed tests
    sLastError : STRING; // Last error message
END_VAR
VAR
    nCurrentTest : INT := 0;
    FB_UnderTest : spatialVelToSE3Matrix; // Instance of the function block

    // Test data
    V_in_zero : ARRAY[1..6] OF REAL;
    se3mat_expected_zero : ARRAY[1..4, 1..4] OF REAL;

    V_in_pure_rotation : ARRAY[1..6] OF REAL; // Angular velocity [0, 0, 1]
    se3mat_expected_pure_rotation : ARRAY[1..4, 1..4] OF REAL;

    V_in_pure_translation : ARRAY[1..6] OF REAL; // Linear velocity [1, 2, 3]
    se3mat_expected_pure_translation : ARRAY[1..4, 1..4] OF REAL;

    V_in_general : ARRAY[1..6] OF REAL; // Angular [1, 0, 0], Linear [0, 1, 0]
    se3mat_expected_general : ARRAY[1..4, 1..4] OF REAL;

    se3mat_out : ARRAY[1..4, 1..4] OF REAL;

    i, j : DINT;
    bTestPass : BOOL;
    fEpsilon : REAL := 1E-6; // Tolerance for REAL comparisons
END_VAR

// Helper function (copy from TransSE3_fromExp_se3TestSuite if needed, or assume available)
FUNCTION CheckMatrixEquality_4x4 : BOOL
VAR_INPUT
    mat1 : POINTER TO ARRAY[1..4, 1..4] OF REAL;
    mat2 : POINTER TO ARRAY[1..4, 1..4] OF REAL;
    tolerance : REAL;
END_VAR
VAR
    r, c : DINT;
END_VAR
    CheckMatrixEquality_4x4 := TRUE;
    FOR r := 1 TO 4 DO
        FOR c := 1 TO 4 DO
            IF ABS(mat1^[r, c] - mat2^[r, c]) >= tolerance THEN
                CheckMatrixEquality_4x4 := FALSE;
                RETURN;
            END_IF
        END_FOR
    END_FOR
END_FUNCTION

// Main execution code
IF bExecute AND NOT bDone THEN
    CASE nCurrentTest OF
        0: // Setup test data
            // Zero velocity
            FOR i := 1 TO 6 DO V_in_zero[i] := 0.0; END_FOR
            FOR i := 1 TO 4 DO 
                FOR j := 1 TO 4 DO 
                    se3mat_expected_zero[i, j] := 0.0; 
                END_FOR 
            END_FOR

            // Pure rotation [0, 0, 1]
            FOR i := 1 TO 6 DO V_in_pure_rotation[i] := 0.0; END_FOR
            V_in_pure_rotation[3] := 1.0;
            FOR i := 1 TO 4 DO 
                FOR j := 1 TO 4 DO 
                    se3mat_expected_pure_rotation[i, j] := 0.0; 
                END_FOR 
            END_FOR
            se3mat_expected_pure_rotation[1, 2] := -1.0; // -wz
            se3mat_expected_pure_rotation[2, 1] := 1.0;  // wz

            // Pure translation [1, 2, 3]
            FOR i := 1 TO 6 DO V_in_pure_translation[i] := 0.0; END_FOR
            V_in_pure_translation[4] := 1.0;
            V_in_pure_translation[5] := 2.0;
            V_in_pure_translation[6] := 3.0;
            FOR i := 1 TO 4 DO 
                FOR j := 1 TO 4 DO 
                    se3mat_expected_pure_translation[i, j] := 0.0; 
                END_FOR 
            END_FOR
            se3mat_expected_pure_translation[1, 4] := 1.0; // vx
            se3mat_expected_pure_translation[2, 4] := 2.0; // vy
            se3mat_expected_pure_translation[3, 4] := 3.0; // vz

            // General velocity: w = [1, 0, 0], v = [0, 1, 0]
            FOR i := 1 TO 6 DO V_in_general[i] := 0.0; END_FOR
            V_in_general[1] := 1.0; // wx
            V_in_general[5] := 1.0; // vy
            FOR i := 1 TO 4 DO 
                FOR j := 1 TO 4 DO 
                    se3mat_expected_general[i, j] := 0.0; 
                END_FOR 
            END_FOR
            se3mat_expected_general[2, 3] := -1.0; // -wx
            se3mat_expected_general[3, 2] := 1.0;  // wx
            se3mat_expected_general[2, 4] := 1.0;  // vy

            nCurrentTest := nCurrentTest + 1;

        1: // Test with Zero Velocity
            FB_UnderTest(V := V_in_zero, se3mat => se3mat_out);
            bTestPass := CheckMatrixEquality_4x4(mat1 := ADR(se3mat_out), mat2 := ADR(se3mat_expected_zero), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'spatialVelToSE3Matrix failed for Zero Velocity';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        2: // Test with Pure Rotation
            FB_UnderTest(V := V_in_pure_rotation, se3mat => se3mat_out);
            bTestPass := CheckMatrixEquality_4x4(mat1 := ADR(se3mat_out), mat2 := ADR(se3mat_expected_pure_rotation), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'spatialVelToSE3Matrix failed for Pure Rotation';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        3: // Test with Pure Translation
             FB_UnderTest(V := V_in_pure_translation, se3mat => se3mat_out);
            bTestPass := CheckMatrixEquality_4x4(mat1 := ADR(se3mat_out), mat2 := ADR(se3mat_expected_pure_translation), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'spatialVelToSE3Matrix failed for Pure Translation';
            END_IF
            nCurrentTest := nCurrentTest + 1;

         4: // Test with General Velocity
            FB_UnderTest(V := V_in_general, se3mat => se3mat_out);
            bTestPass := CheckMatrixEquality_4x4(mat1 := ADR(se3mat_out), mat2 := ADR(se3mat_expected_general), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'spatialVelToSE3Matrix failed for General Velocity';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        ELSE
            bDone := TRUE;
    END_CASE
END_IF

IF NOT bExecute THEN
    nCurrentTest := 0;
    nPassCount := 0;
    nFailCount := 0;
    sLastError := '';
    bDone := FALSE;
END_IF
ENDFUNCTION_BLOCK 