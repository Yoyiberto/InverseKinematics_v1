FUNCTION_BLOCK RotSO3_fromExpso3TestSuite
VAR_INPUT
    bExecute : BOOL; // Trigger to run tests
END_VAR
VAR_OUTPUT
    bDone : BOOL;    // All tests complete
    nPassCount : INT; // Number of passed tests
    nFailCount : INT; // Number of failed tests
    sLastError : STRING; // Last error message
END_VAR
VAR
    nCurrentTest : INT := 0;
    FB_UnderTest : RotSO3_fromExpso3; // Instance of the function block

    // Test data
    so3mat_in_zero : ARRAY[1..3, 1..3] OF REAL;
    R_expected_identity : ARRAY[1..3, 1..3] OF REAL;

    so3mat_in_rotX_pi_2 : ARRAY[1..3, 1..3] OF REAL; // Rotation PI/2 around X
    R_expected_rotX_pi_2 : ARRAY[1..3, 1..3] OF REAL;

    so3mat_in_rotY_pi : ARRAY[1..3, 1..3] OF REAL; // Rotation PI around Y
    R_expected_rotY_pi : ARRAY[1..3, 1..3] OF REAL;

    so3mat_in_rotZ_neg_pi_2 : ARRAY[1..3, 1..3] OF REAL; // Rotation -PI/2 around Z
    R_expected_rotZ_neg_pi_2 : ARRAY[1..3, 1..3] OF REAL;

    R_out : ARRAY[1..3, 1..3] OF REAL;

    i, j : DINT;
    bTestPass : BOOL;
    fEpsilon : REAL := 1E-5; // Tolerance for REAL comparisons (trig functions)
    PI : REAL := 3.1415926535;
END_VAR

// Helper function
FUNCTION CheckMatrixEquality_3x3 : BOOL
VAR_INPUT
    mat1 : POINTER TO ARRAY[1..3, 1..3] OF REAL;
    mat2 : POINTER TO ARRAY[1..3, 1..3] OF REAL;
    tolerance : REAL;
END_VAR
VAR
    r, c : DINT;
END_VAR
    CheckMatrixEquality_3x3 := TRUE;
    FOR r := 1 TO 3 DO
        FOR c := 1 TO 3 DO
            IF ABS(mat1^[r, c] - mat2^[r, c]) >= tolerance THEN
                CheckMatrixEquality_3x3 := FALSE;
                RETURN;
            END_IF
        END_FOR
    END_FOR
END_FUNCTION

// Main execution code
IF bExecute AND NOT bDone THEN
    CASE nCurrentTest OF
        0: // Setup test data
            // Zero so3 matrix -> Identity rotation
            FOR i := 1 TO 3 DO 
                FOR j := 1 TO 3 DO 
                    so3mat_in_zero[i, j] := 0.0; 
                END_FOR 
            END_FOR
            FOR i := 1 TO 3 DO 
                FOR j := 1 TO 3 DO 
                    IF i=j THEN 
                        R_expected_identity[i, j] := 1.0; 
                    ELSE 
                        R_expected_identity[i, j] := 0.0;  
                    END_IF 
                END_FOR 
            END_FOR

            // Rotation PI/2 around X: w*theta = [PI/2, 0, 0] -> so3 = [0 0 0; 0 0 -PI/2; 0 PI/2 0]
            FOR i := 1 TO 3 DO 
                FOR j := 1 TO 3 DO 
                    so3mat_in_rotX_pi_2[i, j] := 0.0; 
                END_FOR 
            END_FOR
            so3mat_in_rotX_pi_2[2, 3] := -PI / 2.0;
            so3mat_in_rotX_pi_2[3, 2] := PI / 2.0;
            // Expected R = Rot(X, PI/2) = [1 0 0; 0 0 -1; 0 1 0]
            FOR i := 1 TO 3 DO 
                FOR j := 1 TO 3 DO 
                    R_expected_rotX_pi_2[i, j] := 0.0; 
                END_FOR 
            END_FOR
            R_expected_rotX_pi_2[1, 1] := 1.0;
            R_expected_rotX_pi_2[2, 2] := 0.0; R_expected_rotX_pi_2[2, 3] := -1.0;
            R_expected_rotX_pi_2[3, 2] := 1.0; R_expected_rotX_pi_2[3, 3] := 0.0;

            // Rotation PI around Y: w*theta = [0, PI, 0] -> so3 = [0 0 PI; 0 0 0; -PI 0 0]
            FOR i := 1 TO 3 DO 
                FOR j := 1 TO 3 DO 
                    so3mat_in_rotY_pi[i, j] := 0.0; 
                END_FOR 
            END_FOR
            so3mat_in_rotY_pi[1, 3] := PI;
            so3mat_in_rotY_pi[3, 1] := -PI;
            // Expected R = Rot(Y, PI) = [-1 0 0; 0 1 0; 0 0 -1]
            FOR i := 1 TO 3 DO 
                FOR j := 1 TO 3 DO 
                    R_expected_rotY_pi[i, j] := 0.0; 
                END_FOR 
            END_FOR
            R_expected_rotY_pi[1, 1] := -1.0;
            R_expected_rotY_pi[2, 2] := 1.0;
            R_expected_rotY_pi[3, 3] := -1.0;

            // Rotation -PI/2 around Z: w*theta = [0, 0, -PI/2] -> so3 = [0 PI/2 0; -PI/2 0 0; 0 0 0]
            FOR i := 1 TO 3 DO 
                FOR j := 1 TO 3 DO 
                    so3mat_in_rotZ_neg_pi_2[i, j] := 0.0; 
                END_FOR 
            END_FOR
            so3mat_in_rotZ_neg_pi_2[1, 2] := PI / 2.0;
            so3mat_in_rotZ_neg_pi_2[2, 1] := -PI / 2.0;
             // Expected R = Rot(Z, -PI/2) = [0 1 0; -1 0 0; 0 0 1]
             FOR i := 1 TO 3 DO 
                FOR j := 1 TO 3 DO 
                    R_expected_rotZ_neg_pi_2[i, j] := 0.0; 
                END_FOR 
            END_FOR
            R_expected_rotZ_neg_pi_2[1, 1] := 0.0; R_expected_rotZ_neg_pi_2[1, 2] := 1.0;
            R_expected_rotZ_neg_pi_2[2, 1] := -1.0; R_expected_rotZ_neg_pi_2[2, 2] := 0.0;
            R_expected_rotZ_neg_pi_2[3, 3] := 1.0;

            nCurrentTest := nCurrentTest + 1;

        1: // Test with Zero so3 Matrix
            FB_UnderTest(so3mat := so3mat_in_zero, R_Matrix => R_out);
            bTestPass := CheckMatrixEquality_3x3(mat1 := ADR(R_out), mat2 := ADR(R_expected_identity), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'RotSO3_fromExpso3 failed for Zero Matrix';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        2: // Test with X-Rotation PI/2
            FB_UnderTest(so3mat := so3mat_in_rotX_pi_2, R_Matrix => R_out);
            bTestPass := CheckMatrixEquality_3x3(mat1 := ADR(R_out), mat2 := ADR(R_expected_rotX_pi_2), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'RotSO3_fromExpso3 failed for X-Rotation PI/2';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        3: // Test with Y-Rotation PI
            FB_UnderTest(so3mat := so3mat_in_rotY_pi, R_Matrix => R_out);
             bTestPass := CheckMatrixEquality_3x3(mat1 := ADR(R_out), mat2 := ADR(R_expected_rotY_pi), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'RotSO3_fromExpso3 failed for Y-Rotation PI';
            END_IF
            nCurrentTest := nCurrentTest + 1;

         4: // Test with Z-Rotation -PI/2
            FB_UnderTest(so3mat := so3mat_in_rotZ_neg_pi_2, R_Matrix => R_out);
            bTestPass := CheckMatrixEquality_3x3(mat1 := ADR(R_out), mat2 := ADR(R_expected_rotZ_neg_pi_2), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'RotSO3_fromExpso3 failed for Z-Rotation -PI/2';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        ELSE
            bDone := TRUE;
    END_CASE
END_IF

IF NOT bExecute THEN
    nCurrentTest := 0;
    nPassCount := 0;
    nFailCount := 0;
    sLastError := '';
    bDone := FALSE;
END_IF
ENDFUNCTION_BLOCK 