// IMPORTANT: Ensure GVL.nJoints=2 for this test case if used elsewhere
FUNCTION_BLOCK getFwdKinematics_BodyTestSuite
VAR_INPUT
    bExecute : BOOL; // Trigger to run tests
END_VAR
VAR_OUTPUT
    bDone : BOOL;    // All tests complete
    nPassCount : INT; // Number of passed tests
    nFailCount : INT; // Number of failed tests
    sLastError : STRING; // Last error message
END_VAR
VAR
    nCurrentTest : INT := 0;
    FB_UnderTest : getFwdKinematics_Body; // Instance of the function block

    // Test data - Planar 2R Robot (L1=1, L2=1)
    M_2R : ARRAY[1..4, 1..4] OF REAL;
    Blist_2R : ARRAY[1..6, 1..2] OF REAL; // 6xN, N=2 joints

    thetalist_zero : ARRAY[1..2] OF REAL;
    T_expected_home : ARRAY[1..4, 1..4] OF REAL; // Expected T at thetalist = [0, 0]

    thetalist_90_0 : ARRAY[1..2] OF REAL;
    T_expected_90_0 : ARRAY[1..4, 1..4] OF REAL; // Expected T at thetalist = [PI/2, 0]

    thetalist_90_neg90 : ARRAY[1..2] OF REAL;
    T_expected_90_neg90 : ARRAY[1..4, 1..4] OF REAL; // Expected T at thetalist = [PI/2, -PI/2]

    T_out : ARRAY[1..4, 1..4] OF REAL;

    i, j : DINT;
    bTestPass : BOOL;
    fEpsilon : REAL := 1E-5; // Tolerance for REAL comparisons (FK tends to be more precise)
    PI : REAL := 3.1415926535;
END_VAR

// Helper function (copy from TransSE3_fromExp_se3TestSuite if needed)
FUNCTION CheckMatrixEquality_4x4 : BOOL
VAR_INPUT
    mat1 : POINTER TO ARRAY[1..4, 1..4] OF REAL;
    mat2 : POINTER TO ARRAY[1..4, 1..4] OF REAL;
    tolerance : REAL;
END_VAR
VAR
    r, c : DINT;
END_VAR
    CheckMatrixEquality_4x4 := TRUE;
    FOR r := 1 TO 4 DO
        FOR c := 1 TO 4 DO
            IF ABS(mat1^[r, c] - mat2^[r, c]) >= tolerance THEN
                CheckMatrixEquality_4x4 := FALSE;
                RETURN;
            END_IF
        END_FOR
    END_FOR
END_FUNCTION

// Main execution code
IF bExecute AND NOT bDone THEN
    CASE nCurrentTest OF
        0: // Setup test data for Planar 2R Robot
            // M: Home configuration (end effector at x=2, y=0, z=0)
            FOR i := 1 TO 4 DO 
                FOR j := 1 TO 4 DO 
                    IF i=j THEN 
                        M_2R[i, j] := 1.0; 
                    ELSE 
                        M_2R[i, j] := 0.0;  
                    END_IF 
                END_FOR 
            END_FOR
            M_2R[1, 4] := 2.0; // L1 + L2
            T_expected_home := M_2R; // At theta=[0,0], T = M

            // Blist: Screw axes in body frame at home config
            // Joint 1: [0, 0, 1, 0, 2, 0]
            Blist_2R[1, 1] := 0.0;
            Blist_2R[2, 1] := 0.0;
            Blist_2R[3, 1] := 1.0;
            Blist_2R[4, 1] := 0.0;
            Blist_2R[5, 1] := 2.0;
            Blist_2R[6, 1] := 0.0;
            // Joint 2: [0, 0, 1, 0, 0, 0]
            Blist_2R[1, 2] := 0.0;
            Blist_2R[2, 2] := 0.0;
            Blist_2R[3, 2] := 1.0;
            Blist_2R[4, 2] := 0.0;
            Blist_2R[5, 2] := 0.0;
            Blist_2R[6, 2] := 0.0;

            // Test Angles
            thetalist_zero[1] := 0.0; thetalist_zero[2] := 0.0;

            thetalist_90_0[1] := PI / 2.0; thetalist_90_0[2] := 0.0;
            // Expected T for [PI/2, 0]: Rot(Z, PI/2), Pos(x=0, y=2)
            FOR i := 1 TO 4 DO 
                FOR j := 1 TO 4 DO 
                    T_expected_90_0[i, j] := 0.0; 
                END_FOR 
            END_FOR
            T_expected_90_0[1, 1] := 0.0; T_expected_90_0[1, 2] := -1.0;
            T_expected_90_0[2, 1] := 1.0; T_expected_90_0[2, 2] := 0.0;
            T_expected_90_0[3, 3] := 1.0;
            T_expected_90_0[1, 4] := 0.0; T_expected_90_0[2, 4] := 2.0; T_expected_90_0[3, 4] := 0.0;
            T_expected_90_0[4, 4] := 1.0;

            thetalist_90_neg90[1] := PI / 2.0; thetalist_90_neg90[2] := -PI / 2.0;
             // Expected T for [PI/2, -PI/2]: Rot(Z, 0), Pos(x=0, y=2)
             FOR i := 1 TO 4 DO
                FOR j := 1 TO 4 DO
                    IF i=j THEN
                        T_expected_90_neg90[i, j] := 1.0;
                    ELSE
                        T_expected_90_neg90[i, j] := 0.0;
                    END_IF
                END_FOR
            END_FOR
            T_expected_90_neg90[1, 4] := 0.0;
            T_expected_90_neg90[2, 4] := 2.0;
            T_expected_90_neg90[3, 4] := 0.0;

            nCurrentTest := nCurrentTest + 1;

        1: // Test with Zero Angles (Home Position)
            FB_UnderTest(M := M_2R, Blist := Blist_2R, thetalist := thetalist_zero, T => T_out);
            bTestPass := CheckMatrixEquality_4x4(mat1 := ADR(T_out), mat2 := ADR(T_expected_home), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'getFwdKinematics_Body failed for Zero Angles';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        2: // Test with theta = [PI/2, 0]
            FB_UnderTest(M := M_2R, Blist := Blist_2R, thetalist := thetalist_90_0, T => T_out);
            bTestPass := CheckMatrixEquality_4x4(mat1 := ADR(T_out), mat2 := ADR(T_expected_90_0), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'getFwdKinematics_Body failed for theta=[PI/2, 0]';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        3: // Test with theta = [PI/2, -PI/2]
            FB_UnderTest(M := M_2R, Blist := Blist_2R, thetalist := thetalist_90_neg90, T => T_out);
            bTestPass := CheckMatrixEquality_4x4(mat1 := ADR(T_out), mat2 := ADR(T_expected_90_neg90), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'getFwdKinematics_Body failed for theta=[PI/2, -PI/2]';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        ELSE
            bDone := TRUE;
    END_CASE
END_IF

IF NOT bExecute THEN
    nCurrentTest := 0;
    nPassCount := 0;
    nFailCount := 0;
    sLastError := '';
    bDone := FALSE;
END_IF
ENDFUNCTION_BLOCK 