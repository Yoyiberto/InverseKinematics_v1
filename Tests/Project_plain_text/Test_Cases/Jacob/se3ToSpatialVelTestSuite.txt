FUNCTION_BLOCK se3ToSpatialVelTestSuite
VAR_INPUT
    bExecute : BOOL; // Trigger to run tests
END_VAR
VAR_OUTPUT
    bDone : BOOL;    // All tests complete
    nPassCount : INT; // Number of passed tests
    nFailCount : INT; // Number of failed tests
    sLastError : STRING; // Last error message
END_VAR
VAR
    nCurrentTest : INT := 0;
    FB_UnderTest : se3ToSpatialVel; // Instance of the function block

    // Test data
    se3mat_in_zero : ARRAY[1..4, 1..4] OF REAL;
    V_expected_zero : ARRAY[1..6] OF REAL;

    se3mat_in_pure_rotation : ARRAY[1..4, 1..4] OF REAL; // Skew-symmetric for [0, 0, 1]
    V_expected_pure_rotation : ARRAY[1..6] OF REAL;

    se3mat_in_pure_translation : ARRAY[1..4, 1..4] OF REAL; // Linear velocity [1, 2, 3]
    V_expected_pure_translation : ARRAY[1..6] OF REAL;

    se3mat_in_general : ARRAY[1..4, 1..4] OF REAL; // Skew for w=[1,2,3], v=[4,5,6]
    V_expected_general : ARRAY[1..6] OF REAL;

    V_out : ARRAY[1..6] OF REAL;

    i, j : DINT;
    bTestPass : BOOL;
    fEpsilon : REAL := 1E-6; // Tolerance for REAL comparisons
END_VAR

// Helper function
FUNCTION CheckVectorEquality_6 : BOOL
VAR_INPUT
    vec1 : POINTER TO ARRAY[1..6] OF REAL;
    vec2 : POINTER TO ARRAY[1..6] OF REAL;
    tolerance : REAL;
END_VAR
VAR
    k : DINT;
END_VAR
    CheckVectorEquality_6 := TRUE;
    FOR k := 1 TO 6 DO
        IF ABS(vec1^[k] - vec2^[k]) >= tolerance THEN
            CheckVectorEquality_6 := FALSE;
            RETURN;
        END_IF
    END_FOR
END_FUNCTION

// Main execution code
IF bExecute AND NOT bDone THEN
    CASE nCurrentTest OF
        0: // Setup test data
            // Zero se3 matrix
            FOR i := 1 TO 4 DO FOR j := 1 TO 4 DO se3mat_in_zero[i, j] := 0.0; END_FOR END_FOR
            FOR i := 1 TO 6 DO V_expected_zero[i] := 0.0; END_FOR

            // Pure rotation (w = [0, 0, 1], v = [0, 0, 0]) -> se3 = [0 -1 0 0; 1 0 0 0; 0 0 0 0; 0 0 0 0]
            FOR i := 1 TO 4 DO FOR j := 1 TO 4 DO se3mat_in_pure_rotation[i, j] := 0.0; END_FOR END_FOR
            se3mat_in_pure_rotation[1, 2] := -1.0;
            se3mat_in_pure_rotation[2, 1] := 1.0;
            FOR i := 1 TO 6 DO V_expected_pure_rotation[i] := 0.0; END_FOR
            V_expected_pure_rotation[3] := 1.0; // wz

            // Pure translation (w = [0, 0, 0], v = [1, 2, 3]) -> se3 = [0 0 0 1; 0 0 0 2; 0 0 0 3; 0 0 0 0]
            FOR i := 1 TO 4 DO FOR j := 1 TO 4 DO se3mat_in_pure_translation[i, j] := 0.0; END_FOR END_FOR
            se3mat_in_pure_translation[1, 4] := 1.0;
            se3mat_in_pure_translation[2, 4] := 2.0;
            se3mat_in_pure_translation[3, 4] := 3.0;
            FOR i := 1 TO 6 DO V_expected_pure_translation[i] := 0.0; END_FOR
            V_expected_pure_translation[4] := 1.0; // vx
            V_expected_pure_translation[5] := 2.0; // vy
            V_expected_pure_translation[6] := 3.0; // vz

            // General se3 (w = [1, 2, 3], v = [4, 5, 6]) -> se3 = [0 -3 2 4; 3 0 -1 5; -2 1 0 6; 0 0 0 0]
            se3mat_in_general[1, 1] := 0.0; se3mat_in_general[1, 2] := -3.0; se3mat_in_general[1, 3] := 2.0; se3mat_in_general[1, 4] := 4.0;
            se3mat_in_general[2, 1] := 3.0; se3mat_in_general[2, 2] := 0.0; se3mat_in_general[2, 3] := -1.0; se3mat_in_general[2, 4] := 5.0;
            se3mat_in_general[3, 1] := -2.0; se3mat_in_general[3, 2] := 1.0; se3mat_in_general[3, 3] := 0.0; se3mat_in_general[3, 4] := 6.0;
            se3mat_in_general[4, 1] := 0.0; se3mat_in_general[4, 2] := 0.0; se3mat_in_general[4, 3] := 0.0; se3mat_in_general[4, 4] := 0.0;
            V_expected_general[1] := 1.0; V_expected_general[2] := 2.0; V_expected_general[3] := 3.0;
            V_expected_general[4] := 4.0; V_expected_general[5] := 5.0; V_expected_general[6] := 6.0;

            nCurrentTest := nCurrentTest + 1;

        1: // Test with Zero Matrix
            FB_UnderTest(se3mat := se3mat_in_zero, V => V_out);
            bTestPass := CheckVectorEquality_6(vec1 := ADR(V_out), vec2 := ADR(V_expected_zero), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'se3ToSpatialVel failed for Zero Matrix';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        2: // Test with Pure Rotation Matrix
            FB_UnderTest(se3mat := se3mat_in_pure_rotation, V => V_out);
            bTestPass := CheckVectorEquality_6(vec1 := ADR(V_out), vec2 := ADR(V_expected_pure_rotation), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'se3ToSpatialVel failed for Pure Rotation';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        3: // Test with Pure Translation Matrix
            FB_UnderTest(se3mat := se3mat_in_pure_translation, V => V_out);
            bTestPass := CheckVectorEquality_6(vec1 := ADR(V_out), vec2 := ADR(V_expected_pure_translation), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'se3ToSpatialVel failed for Pure Translation';
            END_IF
            nCurrentTest := nCurrentTest + 1;

         4: // Test with General Matrix
            FB_UnderTest(se3mat := se3mat_in_general, V => V_out);
            bTestPass := CheckVectorEquality_6(vec1 := ADR(V_out), vec2 := ADR(V_expected_general), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'se3ToSpatialVel failed for General Matrix';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        ELSE
            bDone := TRUE;
    END_CASE
END_IF

IF NOT bExecute THEN
    nCurrentTest := 0;
    nPassCount := 0;
    nFailCount := 0;
    sLastError := '';
    bDone := FALSE;
END_IF
ENDFUNCTION_BLOCK 