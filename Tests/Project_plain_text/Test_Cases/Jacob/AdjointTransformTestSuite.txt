FUNCTION_BLOCK AdjointTransformTestSuite
VAR_INPUT
    bExecute : BOOL; // Trigger to run tests
END_VAR
VAR_OUTPUT
    bDone : BOOL;    // All tests complete
    nPassCount : INT; // Number of passed tests
    nFailCount : INT; // Number of failed tests
    sLastError : STRING; // Last error message
END_VAR
VAR
    nCurrentTest : INT := 0;
    FB_UnderTest : AdjointTransform; // Instance of the function block

    // Test data
    T_in_identity : ARRAY[1..4, 1..4] OF REAL;
    AdT_expected_identity : ARRAY[1..6, 1..6] OF REAL;

    T_in_pure_translation : ARRAY[1..4, 1..4] OF REAL; // Translate [1, 2, 3]
    AdT_expected_pure_translation : ARRAY[1..6, 1..6] OF REAL;

    T_in_pure_rotation : ARRAY[1..4, 1..4] OF REAL; // Rotate PI/2 around Z
    AdT_expected_pure_rotation : ARRAY[1..6, 1..6] OF REAL;

    T_in_general : ARRAY[1..4, 1..4] OF REAL; // Rotate PI/2 around X, Translate [0, 1, 2]
    AdT_expected_general : ARRAY[1..6, 1..6] OF REAL;

    AdT_out : ARRAY[1..6, 1..6] OF REAL;

    i, j : DINT;
    bTestPass : BOOL;
    fEpsilon : REAL := 1E-5; // Tolerance for REAL comparisons
    PI : REAL := 3.1415926535;
END_VAR

// Main execution code
IF bExecute AND NOT bDone THEN
    CASE nCurrentTest OF
        0: // Setup test data
            // Identity Transform
            FOR i := 1 TO 4 DO 
                FOR j := 1 TO 4 DO 
                    IF i=j THEN 
                        T_in_identity[i, j] := 1.0; 
                    ELSE 
                        T_in_identity[i, j] := 0.0;  
                    END_IF 
                END_FOR 
            END_FOR
            // Expected AdT: Identity 6x6
            FOR i := 1 TO 6 DO 
                FOR j := 1 TO 6 DO 
                    IF i=j THEN 
                        AdT_expected_identity[i, j] := 1.0; 
                    ELSE 
                        AdT_expected_identity[i, j] := 0.0;  
                    END_IF 
                END_FOR 
            END_FOR

            // Pure Translation T: Rot=I, p=[1, 2, 3]
            T_in_pure_translation := T_in_identity;
            T_in_pure_translation[1, 4] := 1.0; // Add translation x
            T_in_pure_translation[2, 4] := 2.0; // Add translation y
            T_in_pure_translation[3, 4] := 3.0; // Add translation z
            // Expected AdT = [I, 0; p_skew, I]
            AdT_expected_pure_translation := AdT_expected_identity; // Start with identity
            // p_skew = [0 -3 2; 3 0 -1; -2 1 0]
            AdT_expected_pure_translation[4, 1] := 0.0; AdT_expected_pure_translation[4, 2] := -3.0; AdT_expected_pure_translation[4, 3] := 2.0;
            AdT_expected_pure_translation[5, 1] := 3.0; AdT_expected_pure_translation[5, 2] := 0.0; AdT_expected_pure_translation[5, 3] := -1.0;
            AdT_expected_pure_translation[6, 1] := -2.0; AdT_expected_pure_translation[6, 2] := 1.0; AdT_expected_pure_translation[6, 3] := 0.0;

            // Pure Rotation T: R = Rot(Z, PI/2) = [0 -1 0; 1 0 0; 0 0 1], p = [0, 0, 0]
            T_in_pure_rotation := T_in_identity;
            T_in_pure_rotation[1, 1] := 0.0; T_in_pure_rotation[1, 2] := -1.0;
            T_in_pure_rotation[2, 1] := 1.0; T_in_pure_rotation[2, 2] := 0.0;
            // Expected AdT = [R, 0; 0, R]
            FOR i := 1 TO 6 DO 
                FOR j := 1 TO 6 DO 
                    AdT_expected_pure_rotation[i, j] := 0.0; 
                END_FOR 
            END_FOR
            AdT_expected_pure_rotation[1, 1] := 0.0; AdT_expected_pure_rotation[1, 2] := -1.0;
            AdT_expected_pure_rotation[2, 1] := 1.0; AdT_expected_pure_rotation[2, 2] := 0.0;
            AdT_expected_pure_rotation[3, 3] := 1.0;
            AdT_expected_pure_rotation[4, 4] := 0.0; AdT_expected_pure_rotation[4, 5] := -1.0;
            AdT_expected_pure_rotation[5, 4] := 1.0; AdT_expected_pure_rotation[5, 5] := 0.0;
            AdT_expected_pure_rotation[6, 6] := 1.0;

            // General Transform: R = Rot(X, PI/2) = [1 0 0; 0 0 -1; 0 1 0], p = [0, 1, 2]
            T_in_general := T_in_identity;
            T_in_general[2, 2] := 0.0; T_in_general[2, 3] := -1.0;
            T_in_general[3, 2] := 1.0; T_in_general[3, 3] := 0.0;
            T_in_general[1, 4] := 0.0; T_in_general[2, 4] := 1.0; T_in_general[3, 4] := 2.0;
            // Expected AdT = [R, 0; p_skew*R, R]
            // R = [1 0 0; 0 0 -1; 0 1 0]
            // p = [0, 1, 2]
            // p_skew = [0 -2 1; 2 0 0; -1 0 0]
            // p_skew*R = [0 -2 1; 2 0 0; -1 0 0] * [1 0 0; 0 0 -1; 0 1 0] = [0 1 2; 2 0 0; -1 0 0]
            FOR i := 1 TO 6 DO 
                FOR j := 1 TO 6 DO 
                    AdT_expected_general[i, j] := 0.0; 
                END_FOR 
            END_FOR
            // Top-left (R)
            AdT_expected_general[1, 1] := 1.0;
            AdT_expected_general[2, 2] := 0.0; AdT_expected_general[2, 3] := -1.0;
            AdT_expected_general[3, 2] := 1.0; AdT_expected_general[3, 3] := 0.0;
            // Bottom-right (R)
            AdT_expected_general[4, 4] := 1.0;
            AdT_expected_general[5, 5] := 0.0; AdT_expected_general[5, 6] := -1.0;
            AdT_expected_general[6, 5] := 1.0; AdT_expected_general[6, 6] := 0.0;
            // Bottom-left (p_skew*R)
            AdT_expected_general[4, 1] := 0.0; AdT_expected_general[4, 2] := 1.0; AdT_expected_general[4, 3] := 2.0;
            AdT_expected_general[5, 1] := 2.0; AdT_expected_general[5, 2] := 0.0; AdT_expected_general[5, 3] := 0.0;
            AdT_expected_general[6, 1] := -1.0; AdT_expected_general[6, 2] := 0.0; AdT_expected_general[6, 3] := 0.0;

            nCurrentTest := nCurrentTest + 1;

        1: // Test with Identity Transform
            FB_UnderTest(Transform4x4 := T_in_identity, AdT => AdT_out);
            bTestPass := CheckMatrixEquality_6x6(mat1 := ADR(AdT_out), mat2 := ADR(AdT_expected_identity), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'AdjointTransform failed for Identity Transform';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        2: // Test with Pure Translation
            FB_UnderTest(Transform4x4 := T_in_pure_translation, AdT => AdT_out);
            bTestPass := CheckMatrixEquality_6x6(mat1 := ADR(AdT_out), mat2 := ADR(AdT_expected_pure_translation), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'AdjointTransform failed for Pure Translation';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        3: // Test with Pure Rotation
            FB_UnderTest(Transform4x4 := T_in_pure_rotation, AdT => AdT_out);
            bTestPass := CheckMatrixEquality_6x6(mat1 := ADR(AdT_out), mat2 := ADR(AdT_expected_pure_rotation), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'AdjointTransform failed for Pure Rotation';
            END_IF
            nCurrentTest := nCurrentTest + 1;

         4: // Test with General Transform
            FB_UnderTest(Transform4x4 := T_in_general, AdT => AdT_out);
            bTestPass := CheckMatrixEquality_6x6(mat1 := ADR(AdT_out), mat2 := ADR(AdT_expected_general), tolerance := fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'AdjointTransform failed for General Transform';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        ELSE
            bDone := TRUE;
    END_CASE
END_IF

IF NOT bExecute THEN
    nCurrentTest := 0;
    nPassCount := 0;
    nFailCount := 0;
    sLastError := '';
    bDone := FALSE;
END_IF
ENDFUNCTION_BLOCK 