FUNCTION_BLOCK EyeTestSuite
VAR_INPUT
    bExecute : BOOL; // Trigger to run tests
END_VAR
VAR_OUTPUT
    bDone : BOOL;    // All tests complete
    nPassCount : INT; // Number of passed tests
    nFailCount : INT; // Number of failed tests
    sLastError : STRING; // Last error message
END_VAR
VAR
    nCurrentTest : INT := 0;
    Eye_FB : Eye; // Instance of the Eye function block
    MatMul_FB : MatMul; // For checking properties of identity matrix
    
    // Test matrices
    eye_2x2 : ARRAY[1..2, 1..2] OF REAL;
    eye_3x3 : ARRAY[1..3, 1..3] OF REAL;
    eye_4x4 : ARRAY[1..4, 1..4] OF REAL;
    
    // Test matrices for multiplication
    A_2x2 : ARRAY[1..2, 1..2] OF REAL;
    A_3x3 : ARRAY[1..3, 1..3] OF REAL;
    
    // Result matrices
    result_2x2 : ARRAY[1..2, 1..2] OF REAL;
    result_3x3 : ARRAY[1..3, 1..3] OF REAL;
    
    i, j : DINT;
    bTestPass : BOOL;
    epsilon : REAL := 0.000001; // Tolerance for floating point comparisons
END_VAR

// Main execution code
IF bExecute AND NOT bDone THEN
    CASE nCurrentTest OF
        0: // Setup test matrices
            // Create a 2x2 matrix for testing
            A_2x2[1,1] := 7; A_2x2[1,2] := 5;
            A_2x2[2,1] := 3; A_2x2[2,2] := 9;
            
            // Create a 3x3 matrix for testing
            A_3x3[1,1] := 1; A_3x3[1,2] := 2; A_3x3[1,3] := 3;
            A_3x3[2,1] := 4; A_3x3[2,2] := 5; A_3x3[2,3] := 6;
            A_3x3[3,1] := 7; A_3x3[3,2] := 8; A_3x3[3,3] := 9;
            
            nCurrentTest := nCurrentTest + 1;
            
        1: // Test 2x2 identity matrix
            // Initialize eye matrix
            FOR i := 1 TO 2 DO
                FOR j := 1 TO 2 DO
                    eye_2x2[i,j] := 0;
                END_FOR
            END_FOR
            
            // Generate identity matrix
            Eye_FB(eye := eye_2x2);
            
            // Check if it's a proper identity matrix
            bTestPass := TRUE;
            FOR i := 1 TO 2 DO
                FOR j := 1 TO 2 DO
                    IF i = j THEN
                        IF ABS(eye_2x2[i,j] - 1.0) > epsilon THEN
                            bTestPass := FALSE;
                        END_IF
                    ELSE
                        IF ABS(eye_2x2[i,j]) > epsilon THEN
                            bTestPass := FALSE;
                        END_IF
                    END_IF
                END_FOR
            END_FOR
            
            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Eye function failed to create proper 2x2 identity matrix';
            END_IF
            nCurrentTest := nCurrentTest + 1;
            
        2: // Test 3x3 identity matrix
            // Initialize eye matrix
            FOR i := 1 TO 3 DO
                FOR j := 1 TO 3 DO
                    eye_3x3[i,j] := 0;
                END_FOR
            END_FOR
            
            // Generate identity matrix
            Eye_FB(eye := eye_3x3);
            
            // Check if it's a proper identity matrix
            bTestPass := TRUE;
            FOR i := 1 TO 3 DO
                FOR j := 1 TO 3 DO
                    IF i = j THEN
                        IF ABS(eye_3x3[i,j] - 1.0) > epsilon THEN
                            bTestPass := FALSE;
                        END_IF
                    ELSE
                        IF ABS(eye_3x3[i,j]) > epsilon THEN
                            bTestPass := FALSE;
                        END_IF
                    END_IF
                END_FOR
            END_FOR
            
            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Eye function failed to create proper 3x3 identity matrix';
            END_IF
            nCurrentTest := nCurrentTest + 1;
            
        3: // Test 4x4 identity matrix
            // Initialize eye matrix
            FOR i := 1 TO 4 DO
                FOR j := 1 TO 4 DO
                    eye_4x4[i,j] := 0;
                END_FOR
            END_FOR
            
            // Generate identity matrix
            Eye_FB(eye := eye_4x4);
            
            // Check if it's a proper identity matrix
            bTestPass := TRUE;
            FOR i := 1 TO 4 DO
                FOR j := 1 TO 4 DO
                    IF i = j THEN
                        IF ABS(eye_4x4[i,j] - 1.0) > epsilon THEN
                            bTestPass := FALSE;
                        END_IF
                    ELSE
                        IF ABS(eye_4x4[i,j]) > epsilon THEN
                            bTestPass := FALSE;
                        END_IF
                    END_IF
                END_FOR
            END_FOR
            
            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Eye function failed to create proper 4x4 identity matrix';
            END_IF
            nCurrentTest := nCurrentTest + 1;
            
        4: // Test A*I = A property for 2x2
            MatMul_FB(mat1 := A_2x2, mat2 := eye_2x2, MatResult := result_2x2);
            
            bTestPass := TRUE;
            FOR i := 1 TO 2 DO
                FOR j := 1 TO 2 DO
                    IF ABS(result_2x2[i,j] - A_2x2[i,j]) > epsilon THEN
                        bTestPass := FALSE;
                    END_IF
                END_FOR
            END_FOR
            
            IF bTestPass AND MatMul_FB.Error = '' THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Identity matrix failed test A*I = A for 2x2 matrix';
            END_IF
            nCurrentTest := nCurrentTest + 1;
            
        5: // Test I*A = A property for 2x2
            MatMul_FB(mat1 := eye_2x2, mat2 := A_2x2, MatResult := result_2x2);
            
            bTestPass := TRUE;
            FOR i := 1 TO 2 DO
                FOR j := 1 TO 2 DO
                    IF ABS(result_2x2[i,j] - A_2x2[i,j]) > epsilon THEN
                        bTestPass := FALSE;
                    END_IF
                END_FOR
            END_FOR
            
            IF bTestPass AND MatMul_FB.Error = '' THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Identity matrix failed test I*A = A for 2x2 matrix';
            END_IF
            nCurrentTest := nCurrentTest + 1;
            
        6: // Test A*I = A property for 3x3
            MatMul_FB(mat1 := A_3x3, mat2 := eye_3x3, MatResult := result_3x3);
            
            bTestPass := TRUE;
            FOR i := 1 TO 3 DO
                FOR j := 1 TO 3 DO
                    IF ABS(result_3x3[i,j] - A_3x3[i,j]) > epsilon THEN
                        bTestPass := FALSE;
                    END_IF
                END_FOR
            END_FOR
            
            IF bTestPass AND MatMul_FB.Error = '' THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Identity matrix failed test A*I = A for 3x3 matrix';
            END_IF
            nCurrentTest := nCurrentTest + 1;
            
        7: // Test I*A = A property for 3x3
            MatMul_FB(mat1 := eye_3x3, mat2 := A_3x3, MatResult := result_3x3);
            
            bTestPass := TRUE;
            FOR i := 1 TO 3 DO
                FOR j := 1 TO 3 DO
                    IF ABS(result_3x3[i,j] - A_3x3[i,j]) > epsilon THEN
                        bTestPass := FALSE;
                    END_IF
                END_FOR
            END_FOR
            
            IF bTestPass AND MatMul_FB.Error = '' THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Identity matrix failed test I*A = A for 3x3 matrix';
            END_IF
            nCurrentTest := nCurrentTest + 1;
            
        ELSE
            bDone := TRUE;
    END_CASE
END_IF

IF NOT bExecute THEN
    nCurrentTest := 0;
    nPassCount := 0;
    nFailCount := 0;
    sLastError := '';
    bDone := FALSE;
END_IF 