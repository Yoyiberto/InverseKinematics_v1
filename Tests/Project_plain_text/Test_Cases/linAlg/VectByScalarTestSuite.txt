FUNCTION_BLOCK VectByScalarTestSuite
VAR_INPUT
    bExecute : BOOL; // Trigger to run tests
END_VAR
VAR_OUTPUT
    bDone : BOOL;    // All tests complete
    nPassCount : INT; // Number of passed tests
    nFailCount : INT; // Number of failed tests
    sLastError : STRING; // Last error message
END_VAR
VAR
    nCurrentTest : INT := 0;
    VectByScalar_FB : Vect_byScalar; // Instance of the Vect_byScalar function block

    // Test data
    vec_in_3 : ARRAY[1..3] OF REAL;
    vec_out_3 : ARRAY[1..3] OF REAL;
    scalar_val : REAL;

    vec_zero_4 : ARRAY[1..4] OF REAL;
    vec_zero_out_4 : ARRAY[1..4] OF REAL;

    i : DINT;
    bTestPass : BOOL;
    fEpsilon : REAL := 1E-6; // Tolerance for REAL comparisons
END_VAR

// Main execution code
IF bExecute AND NOT bDone THEN
    CASE nCurrentTest OF
        0: // Setup vectors and scalar for later tests
            // 3-element vector
            vec_in_3[1] := 1.0; vec_in_3[2] := -2.5; vec_in_3[3] := 10.0;

            // Zero vector
            FOR i := 1 TO 4 DO
                vec_zero_4[i] := 0.0;
            END_FOR

            nCurrentTest := nCurrentTest + 1;

        1: // Test multiplication by a positive scalar (3.0)
            scalar_val := 3.0;
            VectByScalar_FB(scalar := scalar_val, Vector := vec_in_3, VectorByScalar := vec_out_3);

            // Expected result: [3.0, -7.5, 30.0]
            bTestPass := (ABS(vec_out_3[1] - 3.0) < fEpsilon) AND
                       (ABS(vec_out_3[2] - -7.5) < fEpsilon) AND
                       (ABS(vec_out_3[3] - 30.0) < fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Vect_byScalar failed for positive scalar multiplication';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        2: // Test multiplication by zero
            scalar_val := 0.0;
            VectByScalar_FB(scalar := scalar_val, Vector := vec_in_3, VectorByScalar := vec_out_3);

            // Expected result: [0.0, 0.0, 0.0]
            bTestPass := (ABS(vec_out_3[1] - 0.0) < fEpsilon) AND
                       (ABS(vec_out_3[2] - 0.0) < fEpsilon) AND
                       (ABS(vec_out_3[3] - 0.0) < fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Vect_byScalar failed for zero scalar multiplication';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        3: // Test multiplication by a negative scalar (-0.5)
            scalar_val := -0.5;
            VectByScalar_FB(scalar := scalar_val, Vector := vec_in_3, VectorByScalar := vec_out_3);

            // Expected result: [-0.5, 1.25, -5.0]
            bTestPass := (ABS(vec_out_3[1] - -0.5) < fEpsilon) AND
                       (ABS(vec_out_3[2] - 1.25) < fEpsilon) AND
                       (ABS(vec_out_3[3] - -5.0) < fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Vect_byScalar failed for negative scalar multiplication';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        4: // Test multiplication by one
            scalar_val := 1.0;
            VectByScalar_FB(scalar := scalar_val, Vector := vec_in_3, VectorByScalar := vec_out_3);

            bTestPass := TRUE;
            FOR i := 1 TO 3 DO
                IF ABS(vec_out_3[i] - vec_in_3[i]) >= fEpsilon THEN
                    bTestPass := FALSE;
                    EXIT;
                END_IF
            END_FOR

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Vect_byScalar failed for scalar=1 multiplication';
            END_IF
            nCurrentTest := nCurrentTest + 1;

         5: // Test multiplication of zero vector
            scalar_val := 10.0; // Arbitrary non-zero scalar
            VectByScalar_FB(scalar := scalar_val, Vector := vec_zero_4, VectorByScalar := vec_zero_out_4);

            bTestPass := TRUE;
            FOR i := 1 TO 4 DO
                IF ABS(vec_zero_out_4[i] - 0.0) >= fEpsilon THEN
                    bTestPass := FALSE;
                    EXIT;
                END_IF
            END_FOR

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Vect_byScalar failed for zero vector input';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        ELSE
            bDone := TRUE;
    END_CASE
END_IF

IF NOT bExecute THEN
    nCurrentTest := 0;
    nPassCount := 0;
    nFailCount := 0;
    sLastError := '';
    bDone := FALSE;
END_IF
ENDFUNCTION_BLOCK 