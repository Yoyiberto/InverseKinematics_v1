FUNCTION_BLOCK MatByScalarTestSuite
VAR_INPUT
    bExecute : BOOL; // Trigger to run tests
END_VAR
VAR_OUTPUT
    bDone : BOOL;    // All tests complete
    nPassCount : INT; // Number of passed tests
    nFailCount : INT; // Number of failed tests
    sLastError : STRING; // Last error message
END_VAR
VAR
    nCurrentTest : INT := 0;
    MatByScalar_FB : Mat_byScalar; // Instance of the Mat_byScalar function block

    // Test data
    mat_in_2x3 : ARRAY[1..2, 1..3] OF REAL;
    mat_out_2x3 : ARRAY[1..2, 1..3] OF REAL;
    scalar_val : REAL;

    mat_zero_2x2 : ARRAY[1..2, 1..2] OF REAL;
    mat_zero_out_2x2 : ARRAY[1..2, 1..2] OF REAL;

    mat_identity_3x3 : ARRAY[1..3, 1..3] OF REAL;
    mat_identity_out_3x3 : ARRAY[1..3, 1..3] OF REAL;


    i, j : DINT;
    bTestPass : BOOL;
    fEpsilon : REAL := 1E-6; // Tolerance for REAL comparisons
END_VAR

// Main execution code
IF bExecute AND NOT bDone THEN
    CASE nCurrentTest OF
        0: // Setup matrices and scalar for later tests
            // 2x3 matrix
            mat_in_2x3[1,1] := 1.0; mat_in_2x3[1,2] := 2.0; mat_in_2x3[1,3] := -3.0;
            mat_in_2x3[2,1] := 4.5; mat_in_2x3[2,2] := -5.5; mat_in_2x3[2,3] := 0.0;

            // Zero matrix
            FOR i := 1 TO 2 DO
                FOR j := 1 TO 2 DO
                    mat_zero_2x2[i,j] := 0.0;
                END_FOR
            END_FOR

            // Identity matrix
            FOR i := 1 TO 3 DO
                FOR j := 1 TO 3 DO
                    IF i = j THEN
                        mat_identity_3x3[i,j] := 1.0;
                    ELSE
                        mat_identity_3x3[i,j] := 0.0;
                    END_IF
                END_FOR
            END_FOR

            nCurrentTest := nCurrentTest + 1;

        1: // Test multiplication by a positive scalar (2.0)
            scalar_val := 2.0;
            MatByScalar_FB(scalar := scalar_val, Matrix := mat_in_2x3, MatrixByScalar := mat_out_2x3);

            // Expected result: [2.0, 4.0, -6.0; 9.0, -11.0, 0.0]
            bTestPass := (ABS(mat_out_2x3[1,1] - 2.0) < fEpsilon) AND
                       (ABS(mat_out_2x3[1,2] - 4.0) < fEpsilon) AND
                       (ABS(mat_out_2x3[1,3] - -6.0) < fEpsilon) AND
                       (ABS(mat_out_2x3[2,1] - 9.0) < fEpsilon) AND
                       (ABS(mat_out_2x3[2,2] - -11.0) < fEpsilon) AND
                       (ABS(mat_out_2x3[2,3] - 0.0) < fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Mat_byScalar failed for positive scalar multiplication';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        2: // Test multiplication by zero
            scalar_val := 0.0;
            MatByScalar_FB(scalar := scalar_val, Matrix := mat_in_2x3, MatrixByScalar := mat_out_2x3);

            bTestPass := TRUE;
            FOR i := 1 TO 2 DO
                FOR j := 1 TO 3 DO
                    IF ABS(mat_out_2x3[i,j] - 0.0) >= fEpsilon THEN
                        bTestPass := FALSE;
                        EXIT;
                    END_IF
                END_FOR
                IF NOT bTestPass THEN EXIT; END_IF
            END_FOR

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Mat_byScalar failed for zero scalar multiplication';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        3: // Test multiplication by a negative scalar (-1.5)
            scalar_val := -1.5;
            MatByScalar_FB(scalar := scalar_val, Matrix := mat_in_2x3, MatrixByScalar := mat_out_2x3);

            // Expected result: [-1.5, -3.0, 4.5; -6.75, 8.25, 0.0]
            bTestPass := (ABS(mat_out_2x3[1,1] - -1.5) < fEpsilon) AND
                       (ABS(mat_out_2x3[1,2] - -3.0) < fEpsilon) AND
                       (ABS(mat_out_2x3[1,3] - 4.5) < fEpsilon) AND
                       (ABS(mat_out_2x3[2,1] - -6.75) < fEpsilon) AND
                       (ABS(mat_out_2x3[2,2] - 8.25) < fEpsilon) AND
                       (ABS(mat_out_2x3[2,3] - 0.0) < fEpsilon);

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Mat_byScalar failed for negative scalar multiplication';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        4: // Test multiplication by one
            scalar_val := 1.0;
            MatByScalar_FB(scalar := scalar_val, Matrix := mat_identity_3x3, MatrixByScalar := mat_identity_out_3x3);

            bTestPass := TRUE;
             FOR i := 1 TO 3 DO
                FOR j := 1 TO 3 DO
                    IF ABS(mat_identity_out_3x3[i,j] - mat_identity_3x3[i,j]) >= fEpsilon THEN
                        bTestPass := FALSE;
                        EXIT;
                    END_IF
                END_FOR
                 IF NOT bTestPass THEN EXIT; END_IF
            END_FOR

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Mat_byScalar failed for scalar=1 multiplication';
            END_IF
            nCurrentTest := nCurrentTest + 1;

         5: // Test multiplication of zero matrix
            scalar_val := 5.0; // Arbitrary non-zero scalar
            MatByScalar_FB(scalar := scalar_val, Matrix := mat_zero_2x2, MatrixByScalar := mat_zero_out_2x2);

            bTestPass := TRUE;
            FOR i := 1 TO 2 DO
                FOR j := 1 TO 2 DO
                    IF ABS(mat_zero_out_2x2[i,j] - 0.0) >= fEpsilon THEN
                        bTestPass := FALSE;
                        EXIT;
                    END_IF
                END_FOR
                 IF NOT bTestPass THEN EXIT; END_IF
            END_FOR

            IF bTestPass THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Mat_byScalar failed for zero matrix input';
            END_IF
            nCurrentTest := nCurrentTest + 1;

        ELSE
            bDone := TRUE;
    END_CASE
END_IF

IF NOT bExecute THEN
    nCurrentTest := 0;
    nPassCount := 0;
    nFailCount := 0;
    sLastError := '';
    bDone := FALSE;
END_IF
ENDFUNCTION_BLOCK 