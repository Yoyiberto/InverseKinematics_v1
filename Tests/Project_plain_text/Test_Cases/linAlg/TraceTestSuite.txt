FUNCTION_BLOCK TraceTestSuite
VAR_INPUT
    bExecute : BOOL; // Trigger to run tests
END_VAR
VAR_OUTPUT
    bDone : BOOL;    // All tests complete
    nPassCount : INT; // Number of passed tests
    nFailCount : INT; // Number of failed tests
    sLastError : STRING; // Last error message
END_VAR
VAR
    nCurrentTest : INT := 0;
    Trace_FB : Trace; // Instance of the Trace function block
    
    // Test matrices
    mat_identity_3x3 : ARRAY[1..3, 1..3] OF REAL;
    mat_diagonal_3x3 : ARRAY[1..3, 1..3] OF REAL;
    mat_values_3x3 : ARRAY[1..3, 1..3] OF REAL;
    
    // Non-square matrix
    mat_non_square : ARRAY[1..2, 1..3] OF REAL;
    
    // Large matrix test
    mat_large : ARRAY[1..5, 1..5] OF REAL;
    
    // Zero matrix
    mat_zero : ARRAY[1..3, 1..3] OF REAL;
    
    // Helper variables
    i, j : DINT;
    expected_trace : REAL;
    bTestPass : BOOL;
END_VAR

// Main execution code
IF bExecute AND NOT bDone THEN
    CASE nCurrentTest OF
        0: // Setup matrices for later tests
            // Identity matrix (trace = 3)
            FOR i := 1 TO 3 DO
                FOR j := 1 TO 3 DO
                    IF i = j THEN
                        mat_identity_3x3[i,j] := 1;
                    ELSE
                        mat_identity_3x3[i,j] := 0;
                    END_IF
                END_FOR
            END_FOR
            
            // Diagonal matrix with different values (trace = 1+2+3 = 6)
            FOR i := 1 TO 3 DO
                FOR j := 1 TO 3 DO
                    IF i = j THEN
                        mat_diagonal_3x3[i,j] := i;
                    ELSE
                        mat_diagonal_3x3[i,j] := 0;
                    END_IF
                END_FOR
            END_FOR
            
            // General matrix with values
            FOR i := 1 TO 3 DO
                FOR j := 1 TO 3 DO
                    mat_values_3x3[i,j] := i * 10 + j;
                END_FOR
            END_FOR
            
            // Large matrix with diagonal values equal to index
            FOR i := 1 TO 5 DO
                FOR j := 1 TO 5 DO
                    IF i = j THEN
                        mat_large[i,j] := i;
                    ELSE
                        mat_large[i,j] := 0.5;
                    END_IF
                END_FOR
            END_FOR
            
            // Zero matrix initialization
            FOR i := 1 TO 3 DO
                FOR j := 1 TO 3 DO
                    mat_zero[i,j] := 0;
                END_FOR
            END_FOR
            
            nCurrentTest := nCurrentTest + 1;
            
        1: // Test identity matrix trace
            Trace_FB(Matrix := mat_identity_3x3);
            
            IF Trace_FB.trace = 3 AND Trace_FB.Error = '' THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Trace failed for identity matrix (expected 3)';
            END_IF
            nCurrentTest := nCurrentTest + 1;
            
        2: // Test diagonal matrix trace
            Trace_FB(Matrix := mat_diagonal_3x3);
            
            IF Trace_FB.trace = 6 AND Trace_FB.Error = '' THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Trace failed for diagonal matrix (expected 6)';
            END_IF
            nCurrentTest := nCurrentTest + 1;
            
        3: // Test general matrix trace
            Trace_FB(Matrix := mat_values_3x3);
            expected_trace := mat_values_3x3[1,1] + mat_values_3x3[2,2] + mat_values_3x3[3,3];
            bTestPass := ABS(Trace_FB.trace - expected_trace) < 0.001;
            
            IF bTestPass AND Trace_FB.Error = '' THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := CONCAT('Trace failed for general matrix (expected ', REAL_TO_STRING(expected_trace), ')');
            END_IF
            nCurrentTest := nCurrentTest + 1;
            
        4: // Test non-square matrix error handling
            Trace_FB(Matrix := mat_non_square);
            
            IF Trace_FB.Error = 'Non-square matrix' THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Trace did not properly handle non-square matrix';
            END_IF
            nCurrentTest := nCurrentTest + 1;
            
        5: // Test larger matrix (5x5)
            Trace_FB(Matrix := mat_large);
            expected_trace := mat_large[1,1] + mat_large[2,2] + mat_large[3,3] + mat_large[4,4] + mat_large[5,5];
            bTestPass := ABS(Trace_FB.trace - expected_trace) < 0.001;
            
            IF bTestPass AND Trace_FB.Error = '' THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := CONCAT('Trace failed for larger 5x5 matrix (expected ', REAL_TO_STRING(expected_trace), ')');
            END_IF
            nCurrentTest := nCurrentTest + 1;
            
        6: // Test zero matrix
            Trace_FB(Matrix := mat_zero);
            
            IF Trace_FB.trace = 0 AND Trace_FB.Error = '' THEN
                nPassCount := nPassCount + 1;
            ELSE
                nFailCount := nFailCount + 1;
                sLastError := 'Trace failed for zero matrix (expected 0)';
            END_IF
            nCurrentTest := nCurrentTest + 1;
            
        7: // Test complete - set output flags
            bDone := TRUE;
            nCurrentTest := 0;  // Reset for next execution
            sLastError := '';
    END_CASE
END_IF

IF NOT bExecute THEN
    nCurrentTest := 0;
    nPassCount := 0;
    nFailCount := 0;
    sLastError := '';
    bDone := FALSE;
END_IF 