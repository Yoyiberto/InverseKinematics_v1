FUNCTION_BLOCK getInvKinematics_Body
VAR_INPUT
	M:ARRAY[1..4,1..4] OF REAL;
	T:ARRAY[1..4,1..4] OF REAL;
	eomg:REAL;
	ev:REAL;
END_VAR
VAR_IN_OUT
	Blist:ARRAY[*,*] OF REAL; // 6 x nJoints
	thetalist0:ARRAY[*] OF REAL; // nJoints
	thetalist:ARRAY[*] OF REAL; // nJoints //as output
END_VAR

VAR_OUTPUT
	success:BOOL;
	Error:STRING;
END_VAR
VAR
	// FB Instances
	pInv:pInv;
	BodyJacobian:BodyJacobian;
	getFwdKinematics_Body:getFwdKinematics_Body;
	fastInverseTransform:fastInverseTransform;
	MatMul:MatMul;
	Exp_se3_fromTrans:Exp_se3_fromTrans;
	se3ToSpatialVel:se3ToSpatialVel;
	norm:norm;
	
	// Local variables
	i0:DINT;
	i:DINT;
	i1:DINT;
	j1:DINT;
	nJoints: DINT; // Determined size
	maxiterations:DINT;
	normValue_omega:REAL; // Renamed for clarity
	normValue_linear:REAL; // Renamed for clarity
	err:BOOL;
	
	// Internal fixed-size arrays (assuming GVL.MAX_JOINTS exists)
	Blist_internal: ARRAY [1..6, 1..GVL.MAX_JOINTS] OF REAL;
	thetalist_internal: ARRAY [1..GVL.MAX_JOINTS] OF REAL;
	Jb_internal: ARRAY [1..6, 1..GVL.MAX_JOINTS] OF REAL; 
	pInvMatrix_internal: ARRAY [1..GVL.MAX_JOINTS, 1..6] OF REAL;
	temp_vect_internal: ARRAY [1..GVL.MAX_JOINTS] OF REAL;
	
	// Other internal arrays (fixed size)
	MatMul_out:ARRAY[1..4,1..4] OF REAL;
	Vb:ARRAY [1..6] OF REAL;
	Vb_omega: ARRAY [1..3] OF REAL; // Angular part of twist
	Vb_linear: ARRAY [1..3] OF REAL; // Linear part of twist
	
END_VAR


// ---- Implementation Start ----

// 1. Determine Size and Validate Inputs
nJoints := UPPER_BOUND(thetalist0, 1);

IF nJoints <= 0 OR nJoints > GVL.MAX_JOINTS THEN
    success := FALSE;
    Error := 'Invalid or unsupported number of joints from thetalist0.';
    RETURN;
END_IF;

IF UPPER_BOUND(thetalist, 1) <> nJoints THEN
    success := FALSE;
    Error := 'Output thetalist dimension mismatch.';
    RETURN;
END_IF;

IF UPPER_BOUND(Blist, 1) <> 6 OR UPPER_BOUND(Blist, 2) <> nJoints THEN
    success := FALSE;
    Error := 'Blist dimensions must be 6 x nJoints.';
    RETURN;
END_IF;

// 2. Copy Inputs to Internal Arrays
FOR i0 := 1 TO 6 DO // Blist first dim is always 6
	FOR j1 := 1 TO nJoints DO
		Blist_internal[i0, j1] := Blist[i0, j1];
	END_FOR;
END_FOR;

FOR i0 := 1 TO nJoints DO
    thetalist_internal[i0] := thetalist0[i0]; // Initialize internal thetalist
END_FOR;


// 3. Main Iteration Loop
i := 0;
maxiterations := 20; // Or make this an input?

// Initial Forward Kinematics and Error Calculation
getFwdKinematics_Body(M:=M , Blist:=Blist_internal , thetalist:=thetalist_internal); // Use internal arrays
fastInverseTransform(T:=getFwdKinematics_Body.T);
MatMul(mat1:=fastInverseTransform.invT , mat2:=T , MatResult:=MatMul_out );
Exp_se3_fromTrans(T:= MatMul_out);
se3ToSpatialVel(se3mat:=Exp_se3_fromTrans.expmat , V=>Vb);

// Error check (using dedicated 3-element arrays)
Vb_omega[1]:=Vb[1]; Vb_omega[2]:=Vb[2]; Vb_omega[3]:=Vb[3];
norm(vector:= Vb_omega, normValue=> normValue_omega); // Pass 3-element array
Vb_linear[1]:=Vb[4]; Vb_linear[2]:=Vb[5]; Vb_linear[3]:=Vb[6];
norm(vector:= Vb_linear, normValue=> normValue_linear); // Pass 3-element array
err := (normValue_omega > eomg) OR (normValue_linear > ev);

WHILE err AND i < maxiterations DO
    // Calculate Body Jacobian 
    // Assuming BodyJacobian takes nJoints and uses internal arrays
    BodyJacobian(Blist:=Blist_internal , thetalist:=thetalist_internal , Jb:=Jb_internal ); 
    
    // Calculate Pseudo-Inverse
    // Assuming pInv takes nJoints and uses internal arrays
    pInv(matrix:=Jb_internal , pInvMatrix:=pInvMatrix_internal );

    // Update thetalist_internal
    // temp_vect_internal = pInvMatrix_internal * Vb 
    FOR i1 := 1 TO nJoints DO
        temp_vect_internal[i1] := 0.0; // Initialize sum
        FOR j1 := 1 TO 6 DO // Vb size is 6
            temp_vect_internal[i1] := temp_vect_internal[i1] + pInvMatrix_internal[i1, j1] * Vb[j1];
        END_FOR;
        thetalist_internal[i1] := thetalist_internal[i1] + temp_vect_internal[i1];
    END_FOR;
	
    // Increment iteration counter
    i := i + 1;
    
    // Recalculate Forward Kinematics and Error
    getFwdKinematics_Body(M:=M , Blist:=Blist_internal , thetalist:=thetalist_internal); // Use internal arrays
    fastInverseTransform(T:=getFwdKinematics_Body.T);
    MatMul(mat1:=fastInverseTransform.invT , mat2:=T , MatResult:=MatMul_out );
    Exp_se3_fromTrans(T:= MatMul_out);	
    se3ToSpatialVel(se3mat:=Exp_se3_fromTrans.expmat , V=>Vb);

    // Error check (using dedicated 3-element arrays)
    Vb_omega[1]:=Vb[1]; Vb_omega[2]:=Vb[2]; Vb_omega[3]:=Vb[3];
    norm(vector:= Vb_omega, normValue=> normValue_omega); // Pass 3-element array
    Vb_linear[1]:=Vb[4]; Vb_linear[2]:=Vb[5]; Vb_linear[3]:=Vb[6];
    norm(vector:= Vb_linear, normValue=> normValue_linear); // Pass 3-element array
    err := (normValue_omega > eomg) OR (normValue_linear > ev);
END_WHILE

// 4. Set Outputs
success := NOT err;
IF err THEN
	Error:='Inverse kinematics failed to converge within max iterations.';
ELSE
	Error:='';
	// Copy result from internal array back to output VAR_IN_OUT
	FOR i0:=1 TO nJoints DO
		thetalist[i0] := thetalist_internal[i0];
	END_FOR
END_IF