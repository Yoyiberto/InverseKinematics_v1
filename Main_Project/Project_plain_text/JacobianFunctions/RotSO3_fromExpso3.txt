FUNCTION_BLOCK RotSO3_fromExpso3
VAR_INPUT
	so3mat:ARRAY [1..3,1..3] OF REAL;//so3x3
END_VAR
VAR_OUTPUT
	R_Matrix:ARRAY [1..3,1..3] OF REAL;//SO3x3
END_VAR
VAR
	so3ToAngularVelocity:so3ToAngularVelocity;//function
	isValueNegligible:isValueNegligible;//function
	omgtheta:ARRAY [1..3] OF REAL;
	
	
	expToRotAxisAndAngle:expToRotAxisAndAngle;
	omgmat:ARRAY [1..3,1..3] OF REAL;//3x3? so3
	
	i:DINT;
	j:DINT;
	theta:REAL;
	omghat:ARRAY [1..3] OF REAL;
	Eye:Eye;
	MatMul:MatMul;
	omgmat2_temp:ARRAY [1..3,1..3] OF REAL;
	omgmat2:ARRAY [1..3,1..3] OF REAL;//temporal
	Sin_omgmat:ARRAY [1..3,1..3] OF REAL;//temporal
END_VAR

so3ToAngularVelocity(so3mat:=so3mat,omg=>omgtheta);
isValueNegligible(nearArray:=omgtheta);

IF (isValueNegligible.judge=1) THEN //considering array input
	Eye(eye:=R_Matrix );//R_Matrix equals 3x3 identity matrix 
ELSE
	expToRotAxisAndAngle(expc3:= omgtheta
		,omghat=> omghat, theta=> theta);//outs

	i:=1;j:=1;
	FOR i:=1 TO UPPER_BOUND(omgmat,1) DO
		FOR j:=1 TO UPPER_BOUND(omgmat,1) DO
			omgmat[i,j]:=so3mat[i,j]/theta;//need fast assignment 3x3
		END_FOR
	END_FOR
	
	MatMul(mat1:=omgmat , mat2:=omgmat ,
			 MatResult:=omgmat2 );
	
	Eye(eye:=R_Matrix );//R_Matrix equals 3x3 identity matrix 
	i:=1;j:=1;
	FOR i:=1 TO UPPER_BOUND(omgmat,1) DO
		FOR j:=1 TO UPPER_BOUND(omgmat,1) DO
			omgmat2_temp[i,j]:=(1-COS(theta))*omgmat2[i,j];//omgmat*omgmat
			Sin_omgmat[i,j]:=SIN(theta)*omgmat[i,j];
			R_Matrix[i,j]:=R_Matrix[i,j]+Sin_omgmat[i,j]+omgmat2_temp[i,j];		
		END_FOR
	END_FOR

	
	//R_Matrix:=eye(3) + SIN(theta) * omgmat + (1 - COS(theta)) * omgmat * omgmat;//sum of 3x3matrices
END_IF
